{"ast":null,"code":"import _asyncToGenerator from \"/home/ariz/DEV/Audiora/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _defineProperty from \"/home/ariz/DEV/Audiora/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { signal, computed } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { authConfig, authEndpoints } from './auth-config';\nimport { firstValueFrom } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let AuthService = /*#__PURE__*/(() => {\n  var _AuthService;\n  class AuthService {\n    constructor(http, router) {\n      _defineProperty(this, \"http\", void 0);\n      _defineProperty(this, \"router\", void 0);\n      // Reactive authentication state using Angular signals\n      _defineProperty(this, \"_isAuthenticated\", signal(false));\n      _defineProperty(this, \"_userProfile\", signal(null));\n      _defineProperty(this, \"_isLoading\", signal(false));\n      // Public computed signals for components to use\n      _defineProperty(this, \"isAuthenticated\", computed(() => this._isAuthenticated()));\n      _defineProperty(this, \"userProfile\", computed(() => this._userProfile()));\n      _defineProperty(this, \"isLoading\", computed(() => this._isLoading()));\n      // Computed properties for easy access to user info\n      _defineProperty(this, \"userName\", computed(() => this._userProfile()?.name || 'User'));\n      _defineProperty(this, \"userEmail\", computed(() => this._userProfile()?.email || ''));\n      _defineProperty(this, \"userId\", computed(() => this._userProfile()?.id || ''));\n      _defineProperty(this, \"isVerified\", computed(() => this._userProfile()?.verified || false));\n      this.http = http;\n      this.router = router;\n      this.initializeAuth();\n    }\n    initializeAuth() {\n      this._isLoading.set(true);\n      // Check for existing token and auto-login\n      const token = this.getStoredToken();\n      if (token && this.isTokenValid(token)) {\n        this.loadUserProfile().finally(() => {\n          this._isLoading.set(false);\n        });\n      } else {\n        this.clearStoredAuth();\n        this._isLoading.set(false);\n      }\n    }\n    /**\n     * Register a new user account\n     */\n    register(request) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        _this._isLoading.set(true);\n        try {\n          const response = yield firstValueFrom(_this.http.post(`${authConfig.apiBaseUrl}${authEndpoints.register}`, request));\n          _this.storeAuth(response.user, response.token);\n          _this._userProfile.set(response.user);\n          _this._isAuthenticated.set(true);\n          return response;\n        } catch (error) {\n          _this.handleAuthError(error);\n          throw error;\n        } finally {\n          _this._isLoading.set(false);\n        }\n      })();\n    }\n    /**\n     * Login with email and password\n     */\n    login(request) {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        _this2._isLoading.set(true);\n        try {\n          const response = yield firstValueFrom(_this2.http.post(`${authConfig.apiBaseUrl}${authEndpoints.login}`, request));\n          _this2.storeAuth(response.user, response.token);\n          _this2._userProfile.set(response.user);\n          _this2._isAuthenticated.set(true);\n          return response;\n        } catch (error) {\n          _this2.handleAuthError(error);\n          throw error;\n        } finally {\n          _this2._isLoading.set(false);\n        }\n      })();\n    }\n    /**\n     * Logout the user\n     */\n    logout() {\n      var _this3 = this;\n      return _asyncToGenerator(function* () {\n        _this3._isLoading.set(true);\n        try {\n          const token = _this3.getStoredToken();\n          if (token) {\n            // Call backend logout endpoint\n            yield firstValueFrom(_this3.http.post(`${authConfig.apiBaseUrl}${authEndpoints.logout}`, {}, {\n              headers: {\n                Authorization: `Bearer ${token.token}`\n              }\n            }));\n          }\n        } catch (error) {\n          console.warn('Logout API call failed:', error);\n        } finally {\n          _this3.clearStoredAuth();\n          _this3._userProfile.set(null);\n          _this3._isAuthenticated.set(false);\n          _this3._isLoading.set(false);\n          _this3.router.navigate(['/']);\n        }\n      })();\n    }\n    /**\n     * Verify email with verification code\n     */\n    verifyEmail(request) {\n      var _this4 = this;\n      return _asyncToGenerator(function* () {\n        _this4._isLoading.set(true);\n        try {\n          yield firstValueFrom(_this4.http.post(`${authConfig.apiBaseUrl}${authEndpoints.verify}`, request));\n          // Reload user profile to get updated verification status\n          yield _this4.loadUserProfile();\n        } catch (error) {\n          _this4.handleAuthError(error);\n          throw error;\n        } finally {\n          _this4._isLoading.set(false);\n        }\n      })();\n    }\n    /**\n     * Resend verification code\n     */\n    resendVerificationCode(email) {\n      var _this5 = this;\n      return _asyncToGenerator(function* () {\n        _this5._isLoading.set(true);\n        try {\n          yield firstValueFrom(_this5.http.post(`${authConfig.apiBaseUrl}/auth/resend-verification`, {\n            email\n          }));\n        } catch (error) {\n          _this5.handleAuthError(error);\n          throw error;\n        } finally {\n          _this5._isLoading.set(false);\n        }\n      })();\n    }\n    /**\n     * Request password reset\n     */\n    forgotPassword(email) {\n      var _this6 = this;\n      return _asyncToGenerator(function* () {\n        _this6._isLoading.set(true);\n        try {\n          yield firstValueFrom(_this6.http.post(`${authConfig.apiBaseUrl}${authEndpoints.forgotPassword}`, {\n            email\n          }));\n        } catch (error) {\n          _this6.handleAuthError(error);\n          throw error;\n        } finally {\n          _this6._isLoading.set(false);\n        }\n      })();\n    }\n    /**\n     * Reset password with reset code\n     */\n    resetPassword(code, newPassword) {\n      var _this7 = this;\n      return _asyncToGenerator(function* () {\n        _this7._isLoading.set(true);\n        try {\n          yield firstValueFrom(_this7.http.post(`${authConfig.apiBaseUrl}${authEndpoints.resetPassword}`, {\n            code,\n            password: newPassword\n          }));\n        } catch (error) {\n          _this7.handleAuthError(error);\n          throw error;\n        } finally {\n          _this7._isLoading.set(false);\n        }\n      })();\n    }\n    /**\n     * Get current access token\n     */\n    getAccessToken() {\n      const token = this.getStoredToken();\n      return token && this.isTokenValid(token) ? token.token : null;\n    }\n    /**\n     * Exchange OAuth session for JWT token\n     * Used when returning from OAuth providers like Spotify/YouTube\n     */\n    exchangeOAuthSession(sessionId, userId) {\n      var _this8 = this;\n      return _asyncToGenerator(function* () {\n        _this8._isLoading.set(true);\n        try {\n          const response = yield firstValueFrom(_this8.http.post(`${authConfig.apiBaseUrl}/auth/oauth/exchange`, {\n            sessionId,\n            userId\n          }));\n          _this8.storeAuth(response.user, response.token);\n          _this8._userProfile.set(response.user);\n          _this8._isAuthenticated.set(true);\n          return response;\n        } catch (error) {\n          _this8.handleAuthError(error);\n          throw error;\n        } finally {\n          _this8._isLoading.set(false);\n        }\n      })();\n    }\n    /**\n     * Load user profile from backend\n     */\n    loadUserProfile() {\n      var _this9 = this;\n      return _asyncToGenerator(function* () {\n        try {\n          const token = _this9.getStoredToken();\n          if (!token || !_this9.isTokenValid(token)) {\n            throw new Error('No valid token');\n          }\n          const user = yield firstValueFrom(_this9.http.get(`${authConfig.apiBaseUrl}${authEndpoints.profile}`, {\n            headers: {\n              Authorization: `Bearer ${token.token}`\n            }\n          }));\n          _this9._userProfile.set(user);\n          _this9._isAuthenticated.set(true);\n        } catch (error) {\n          console.error('Failed to load user profile:', error);\n          _this9.clearStoredAuth();\n          _this9._isAuthenticated.set(false);\n        }\n      })();\n    }\n    /**\n     * Store authentication data in localStorage\n     */\n    storeAuth(user, token) {\n      try {\n        localStorage.setItem(authConfig.userStorageKey, JSON.stringify(user));\n        localStorage.setItem(authConfig.tokenStorageKey, JSON.stringify(token));\n      } catch (error) {\n        console.warn('Failed to store auth data:', error);\n      }\n    }\n    /**\n     * Get stored token from localStorage\n     */\n    getStoredToken() {\n      try {\n        const tokenStr = localStorage.getItem(authConfig.tokenStorageKey);\n        return tokenStr ? JSON.parse(tokenStr) : null;\n      } catch (error) {\n        console.warn('Failed to parse stored token:', error);\n        return null;\n      }\n    }\n    /**\n     * Check if token is valid and not expired\n     */\n    isTokenValid(token) {\n      if (!token || !token.token) return false;\n      const expiresAt = new Date(token.expiresAt);\n      const now = new Date();\n      const bufferMs = authConfig.tokenExpirationBuffer * 60 * 1000;\n      return expiresAt.getTime() > now.getTime() + bufferMs;\n    }\n    /**\n     * Clear stored authentication data\n     */\n    clearStoredAuth() {\n      localStorage.removeItem(authConfig.userStorageKey);\n      localStorage.removeItem(authConfig.tokenStorageKey);\n    }\n    /**\n     * Handle authentication errors\n     */\n    handleAuthError(error) {\n      console.error('Auth error:', error);\n      if (error instanceof HttpErrorResponse) {\n        if (error.status === 401) {\n          // Unauthorized - clear auth and redirect to login\n          this.clearStoredAuth();\n          this._isAuthenticated.set(false);\n          this._userProfile.set(null);\n        }\n      }\n    }\n    /**\n     * Debug method to check current authentication state\n     */\n    debugAuthState() {\n      console.log('=== AUTH DEBUG ===');\n      console.log('isAuthenticated signal:', this._isAuthenticated());\n      console.log('isLoading signal:', this._isLoading());\n      console.log('userProfile signal:', this._userProfile());\n      const token = this.getStoredToken();\n      console.log('stored token valid:', token ? this.isTokenValid(token) : false);\n      console.log('==================');\n    }\n    /**\n     * Check if user has a valid authentication token\n     */\n    hasValidToken() {\n      const token = this.getStoredToken();\n      return token ? this.isTokenValid(token) : false;\n    }\n    /**\n     * Manually refresh user profile\n     */\n    refreshUserProfile() {\n      var _this0 = this;\n      return _asyncToGenerator(function* () {\n        if (_this0.hasValidToken()) {\n          yield _this0.loadUserProfile();\n        }\n      })();\n    }\n  }\n  _AuthService = AuthService;\n  _defineProperty(AuthService, \"\\u0275fac\", function AuthService_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || _AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  });\n  _defineProperty(AuthService, \"\\u0275prov\", /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: _AuthService,\n    factory: _AuthService.ɵfac,\n    providedIn: 'root'\n  }));\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}