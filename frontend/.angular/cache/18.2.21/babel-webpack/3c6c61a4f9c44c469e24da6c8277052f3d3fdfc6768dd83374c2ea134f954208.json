{"ast":null,"code":"import _asyncToGenerator from \"/home/ariz/DEV/Audiora/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _defineProperty from \"/home/ariz/DEV/Audiora/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { signal } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nexport let YouTubePlayerService = /*#__PURE__*/(() => {\n  var _YouTubePlayerService;\n  class YouTubePlayerService {\n    constructor() {\n      _defineProperty(this, \"player\", void 0);\n      _defineProperty(this, \"apiReady\", signal(false));\n      _defineProperty(this, \"currentVideoId\", signal(null));\n      _defineProperty(this, \"endedCallback\", void 0);\n      _defineProperty(this, \"error\", signal(null));\n      _defineProperty(this, \"playCallback\", void 0);\n      _defineProperty(this, \"pauseCallback\", void 0);\n    }\n    load() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        if (_this.apiReady()) return;\n        yield _this.inject();\n        yield _this.waitReady();\n        _this.createPlayer();\n      })();\n    }\n    inject() {\n      return new Promise((resolve, reject) => {\n        if (window.YT && window.YT.Player) {\n          resolve();\n          return;\n        }\n        const tag = document.createElement('script');\n        tag.src = 'https://www.youtube.com/iframe_api';\n        tag.onload = () => resolve();\n        tag.onerror = e => reject(e);\n        document.head.appendChild(tag);\n      });\n    }\n    waitReady() {\n      return new Promise(resolve => {\n        if (window.YT && window.YT.Player) {\n          resolve();\n          return;\n        }\n        window.onYouTubeIframeAPIReady = () => {\n          resolve();\n        };\n      });\n    }\n    createPlayer() {\n      const containerId = 'yt-player-host';\n      let host = document.getElementById(containerId);\n      if (!host) {\n        host = document.createElement('div');\n        host.id = containerId;\n        host.style.width = '0';\n        host.style.height = '0';\n        host.style.overflow = 'hidden';\n        document.body.appendChild(host);\n      }\n      this.player = new window.YT.Player(containerId, {\n        height: '0',\n        width: '0',\n        videoId: '',\n        playerVars: {\n          autoplay: 0,\n          controls: 0\n        },\n        events: {\n          onReady: () => {\n            this.apiReady.set(true);\n          },\n          onStateChange: e => {\n            if (e.data === window.YT.PlayerState.ENDED && this.endedCallback) {\n              this.endedCallback();\n            } else if (e.data === window.YT.PlayerState.PLAYING && this.playCallback) {\n              this.playCallback();\n            } else if (e.data === window.YT.PlayerState.PAUSED && this.pauseCallback) {\n              this.pauseCallback();\n            }\n          },\n          onError: e => {\n            this.error.set('yt_error_' + e.data);\n          }\n        }\n      });\n    }\n    onEnded(cb) {\n      this.endedCallback = cb;\n    }\n    onPlay(cb) {\n      this.playCallback = cb;\n    }\n    onPause(cb) {\n      this.pauseCallback = cb;\n    }\n    playVideo(videoId, startSeconds) {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        yield _this2.load();\n        if (!_this2.player) return;\n        _this2.currentVideoId.set(videoId);\n        _this2.player.loadVideoById({\n          videoId,\n          startSeconds\n        });\n      })();\n    }\n    pause() {\n      if (this.player) this.player.pauseVideo();\n    }\n    stop() {\n      if (this.player) this.player.stopVideo();\n    }\n    seek(seconds) {\n      if (this.player) this.player.seekTo(seconds, true);\n    }\n    getPositionSeconds() {\n      return this.player ? this.player.getCurrentTime() : 0;\n    }\n    getDurationSeconds() {\n      return this.player ? this.player.getDuration() : 0;\n    }\n    setVolume(v) {\n      if (this.player) {\n        try {\n          this.player.setVolume(Math.max(0, Math.min(100, v)));\n        } catch {}\n      }\n    }\n    getVolume() {\n      return this.player ? this.player.getVolume() : null;\n    }\n  }\n  _YouTubePlayerService = YouTubePlayerService;\n  _defineProperty(YouTubePlayerService, \"\\u0275fac\", function YouTubePlayerService_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || _YouTubePlayerService)();\n  });\n  _defineProperty(YouTubePlayerService, \"\\u0275prov\", /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: _YouTubePlayerService,\n    factory: _YouTubePlayerService.ɵfac,\n    providedIn: 'root'\n  }));\n  return YouTubePlayerService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}