{"ast":null,"code":"import _asyncToGenerator from \"/home/ariz/DEV/Audiora/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _defineProperty from \"/home/ariz/DEV/Audiora/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { signal, computed } from '@angular/core';\nimport { JwksValidationHandler } from 'angular-oauth2-oidc-jwks';\nimport { authConfig, discoveryDocumentUrl } from './auth-config';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"angular-oauth2-oidc\";\nimport * as i2 from \"@angular/router\";\nexport let AuthService = /*#__PURE__*/(() => {\n  var _AuthService;\n  class AuthService {\n    constructor(oauthService, router, zone) {\n      _defineProperty(this, \"oauthService\", void 0);\n      _defineProperty(this, \"router\", void 0);\n      _defineProperty(this, \"zone\", void 0);\n      // Reactive authentication state using Angular signals\n      _defineProperty(this, \"_isAuthenticated\", signal(false));\n      _defineProperty(this, \"_userProfile\", signal(null));\n      _defineProperty(this, \"_isLoading\", signal(true));\n      // Public computed signals for components to use\n      _defineProperty(this, \"isAuthenticated\", computed(() => this._isAuthenticated()));\n      _defineProperty(this, \"userProfile\", computed(() => this._userProfile()));\n      _defineProperty(this, \"isLoading\", computed(() => this._isLoading()));\n      // Computed properties for easy access to user info\n      _defineProperty(this, \"userName\", computed(() => this._userProfile()?.name || 'User'));\n      _defineProperty(this, \"userEmail\", computed(() => this._userProfile()?.email || ''));\n      _defineProperty(this, \"userPicture\", computed(() => this._userProfile()?.picture || ''));\n      _defineProperty(this, \"userId\", computed(() => this._userProfile()?.id || ''));\n      this.oauthService = oauthService;\n      this.router = router;\n      this.zone = zone;\n      this.configureOAuth();\n      this.setupEventHandlers();\n    }\n    configureOAuth() {\n      // Configure the OAuth service with our Google config\n      this.oauthService.configure(authConfig);\n      // Set up JWT validation handler for token validation\n      this.oauthService.tokenValidationHandler = new JwksValidationHandler();\n      // Load the discovery document and attempt automatic login\n      this.loadDiscoveryDocumentAndTryLogin();\n    }\n    setupEventHandlers() {\n      // Listen to OAuth events for state management\n      this.oauthService.events.subscribe(event => {\n        // Ensure all state updates run inside Angular zone for proper change detection\n        this.zone.run(() => {\n          console.log('OAuth Event:', event);\n          switch (event.type) {\n            case 'discovery_document_validation_error':\n              console.warn('Discovery document validation error (this is expected in development with placeholder client ID)');\n              break;\n            case 'discovery_document_loaded':\n              console.log('Discovery document loaded, checking authentication state');\n              if (this.oauthService.hasValidAccessToken()) {\n                console.log('Valid token found after discovery document load');\n                this._isAuthenticated.set(true);\n                this.loadUserProfile();\n              } else {\n                this._isLoading.set(false);\n              }\n              break;\n            case 'token_received':\n              console.log('Token received successfully');\n              this._isAuthenticated.set(true);\n              this._isLoading.set(false);\n              this.loadUserProfile();\n              break;\n            case 'token_refresh_error':\n              console.error('Token refresh error event:', event);\n              // Keep user state but mark as not authenticated if tokens invalid\n              if (!this.oauthService.hasValidAccessToken()) {\n                this._isAuthenticated.set(false);\n              }\n              this._isLoading.set(false);\n              break;\n            case 'token_expires':\n              console.log('Token expired, attempting silent refresh');\n              this.silentRefresh();\n              break;\n            case 'silent_refresh_error':\n              console.log('Silent refresh failed, requiring re-authentication');\n              this.logout();\n              break;\n            case 'logout':\n              this.clearUserData();\n              break;\n            case 'token_error':\n              console.error('Token error:', event);\n              this._isLoading.set(false);\n              break;\n          }\n        });\n      });\n    }\n    loadDiscoveryDocumentAndTryLogin() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        try {\n          _this._isLoading.set(true);\n          // Load Google's OAuth discovery document\n          // Note: May show validation warnings in development with placeholder client ID\n          yield _this.oauthService.loadDiscoveryDocument(discoveryDocumentUrl);\n          // Try to login automatically (if refresh token exists)\n          const loginResult = yield _this.oauthService.tryLoginCodeFlow();\n          console.log('Login result:', loginResult);\n          try {\n            const url = new URL(window.location.href);\n            const hasCode = url.searchParams.has('code');\n            const hasState = url.searchParams.has('state');\n            // Common PKCE storage keys used by angular-oauth2-oidc\n            const pkceVerifier = sessionStorage.getItem('PKCE_verifier');\n            const pkceState = sessionStorage.getItem('OAuthState');\n            console.log('[OAuth Debug] Post-exchange context', {\n              href: window.location.href,\n              hasCode,\n              hasState,\n              pkceVerifierPresent: !!pkceVerifier,\n              pkceStatePresent: !!pkceState,\n              scopeConfigured: _this.oauthService.scope,\n              discoveryLoaded: !!_this.oauthService.configuration\n            });\n          } catch (diagErr) {\n            console.warn('Diagnostics collection failed', diagErr);\n          }\n          if (_this.oauthService.hasValidAccessToken()) {\n            console.log('Automatic login successful');\n            _this._isAuthenticated.set(true);\n            yield _this.loadUserProfile();\n          } else {\n            console.log('No automatic login possible (this is normal without valid Google OAuth client ID)');\n            _this._isAuthenticated.set(false);\n          }\n        } catch (error) {\n          console.error('Failed to initialize OAuth:', error?.type || error);\n          // For discovery document validation errors, just log and continue\n          if (error?.type === 'discovery_document_validation_error') {\n            console.warn('Discovery document validation failed - this is expected with placeholder client ID');\n          }\n          _this._isAuthenticated.set(false);\n        } finally {\n          _this._isLoading.set(false);\n        }\n      })();\n    }\n    /**\n     * Initiate the login flow - redirects to Google OAuth\n     */\n    login() {\n      console.log('Initiating login flow...');\n      this.oauthService.initLoginFlow();\n    }\n    /**\n     * Logout the user and clear all tokens\n     */\n    logout() {\n      this.oauthService.logOut();\n      this.clearUserData();\n      this.router.navigate(['/']);\n    }\n    /**\n     * Perform silent refresh to renew tokens\n     */\n    silentRefresh() {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        try {\n          yield _this2.oauthService.silentRefresh();\n          console.log('Silent refresh successful');\n        } catch (error) {\n          console.error('Silent refresh failed:', error);\n          _this2.logout();\n        }\n      })();\n    }\n    /**\n     * Load user profile information from Google\n     */\n    loadUserProfile() {\n      var _this3 = this;\n      return _asyncToGenerator(function* () {\n        try {\n          console.log('Loading user profile...');\n          if (_this3.oauthService.hasValidAccessToken()) {\n            console.log('Valid access token found, fetching user info');\n            // Get user info from Google's userinfo endpoint\n            const userInfo = yield _this3.oauthService.loadUserProfile();\n            const profile = {\n              id: userInfo.sub || userInfo.id || '',\n              email: userInfo.email || '',\n              name: userInfo.name || '',\n              picture: userInfo.picture,\n              given_name: userInfo.given_name,\n              family_name: userInfo.family_name,\n              verified_email: userInfo.email_verified\n            };\n            _this3._userProfile.set(profile);\n            _this3._isAuthenticated.set(true);\n            _this3._isLoading.set(false);\n            console.log('User profile loaded:', profile);\n          }\n        } catch (error) {\n          console.error('Failed to load user profile:', error);\n          _this3._isAuthenticated.set(false);\n          _this3._isLoading.set(false);\n        }\n      })();\n    }\n    /**\n     * Clear user data and authentication state\n     */\n    clearUserData() {\n      this._isAuthenticated.set(false);\n      this._userProfile.set(null);\n    }\n    /**\n     * Get the current access token\n     */\n    getAccessToken() {\n      return this.oauthService.getAccessToken();\n    }\n    /**\n     * Get the current ID token\n     */\n    getIdToken() {\n      return this.oauthService.getIdToken();\n    }\n    /**\n     * Debug method to check current authentication state\n     */\n    debugAuthState() {\n      console.log('=== AUTH DEBUG ===');\n      console.log('isAuthenticated signal:', this._isAuthenticated());\n      console.log('isLoading signal:', this._isLoading());\n      console.log('userProfile signal:', this._userProfile());\n      console.log('hasValidAccessToken:', this.oauthService.hasValidAccessToken());\n      console.log('hasValidIdToken:', this.oauthService.hasValidIdToken());\n      console.log('==================');\n    }\n    /**\n     * Check if the user has valid tokens\n     */\n    hasValidToken() {\n      return this.oauthService.hasValidAccessToken() && this.oauthService.hasValidIdToken();\n    }\n    /**\n     * Get token claims (decoded JWT payload)\n     */\n    getTokenClaims() {\n      return this.oauthService.getIdentityClaims();\n    }\n    /**\n     * Manually trigger user profile refresh\n     */\n    refreshUserProfile() {\n      var _this4 = this;\n      return _asyncToGenerator(function* () {\n        if (_this4.hasValidToken()) {\n          yield _this4.loadUserProfile();\n        }\n      })();\n    }\n    /**\n     * Check if user has specific OAuth scopes\n     */\n    hasScope(scope) {\n      const grantedScopes = this.oauthService.getGrantedScopes();\n      if (Array.isArray(grantedScopes)) {\n        return grantedScopes.includes(scope);\n      }\n      return false;\n    }\n    /**\n     * Get YouTube access token for API calls\n     * This leverages the existing YouTube scope from our OAuth config\n     */\n    getYouTubeAccessToken() {\n      if (this.hasScope('https://www.googleapis.com/auth/youtube')) {\n        return this.getAccessToken();\n      }\n      return null;\n    }\n  }\n  _AuthService = AuthService;\n  _defineProperty(AuthService, \"\\u0275fac\", function AuthService_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || _AuthService)(i0.ɵɵinject(i1.OAuthService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i0.NgZone));\n  });\n  _defineProperty(AuthService, \"\\u0275prov\", /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: _AuthService,\n    factory: _AuthService.ɵfac,\n    providedIn: 'root'\n  }));\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}