{"ast":null,"code":"import _asyncToGenerator from \"/home/ariz/DEV/Audiora/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _defineProperty from \"/home/ariz/DEV/Audiora/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nvar __esDecorate = this && this.__esDecorate || function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) {\n    if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\");\n    return f;\n  }\n  var kind = contextIn.kind,\n    key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _,\n    done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n    var context = {};\n    for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n    for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n    context.addInitializer = function (f) {\n      if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\");\n      extraInitializers.push(accept(f || null));\n    };\n    var result = (0, decorators[i])(kind === \"accessor\" ? {\n      get: descriptor.get,\n      set: descriptor.set\n    } : descriptor[key], context);\n    if (kind === \"accessor\") {\n      if (result === void 0) continue;\n      if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n      if (_ = accept(result.get)) descriptor.get = _;\n      if (_ = accept(result.set)) descriptor.set = _;\n      if (_ = accept(result.init)) initializers.unshift(_);\n    } else if (_ = accept(result)) {\n      if (kind === \"field\") initializers.unshift(_);else descriptor[key] = _;\n    }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\nvar __runInitializers = this && this.__runInitializers || function (thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n    value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\nimport { Component, signal } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { SidebarComponent } from './layout/sidebar.component';\nimport { NowPlayingPanelComponent } from './now-playing-panel.component';\nimport { AlbumCarouselComponent } from './album-carousel.component';\nimport { BottomPlayerComponent } from './bottom-player.component';\nlet AppComponent = (_Class => {\n  let _classDecorators = [Component({\n    selector: 'app-root',\n    standalone: true,\n    imports: [CommonModule, HttpClientModule, FormsModule, SidebarComponent, NowPlayingPanelComponent, BottomPlayerComponent, AlbumCarouselComponent],\n    styles: [`\n    .inline-instructions-section { margin: var(--space-8) 0; }\n    .inline-instructions { position: relative; padding: var(--space-6); border: 1px solid rgba(255,255,255,0.08); border-radius: 20px; background: linear-gradient(145deg, rgba(20,28,38,0.85), rgba(12,18,25,0.85)); backdrop-filter: blur(14px) saturate(140%); box-shadow: 0 8px 32px -8px rgba(0,0,0,0.6); animation: fadeIn .4s ease; }\n    .inline-header { display:flex; justify-content:space-between; align-items:center; margin-bottom: var(--space-4); }\n    .inline-header h2 { margin:0; font-size: 20px; background: var(--gradient-accent); -webkit-background-clip:text; -webkit-text-fill-color:transparent; background-clip:text; }\n    .inline-close { background:none; border:none; color: var(--color-text-dim); font-size:24px; cursor:pointer; line-height:1; padding:4px 8px; border-radius:8px; }\n    .inline-close:hover { background: rgba(255,255,255,0.08); color: var(--color-text); }\n    .inline-instructions .intro { margin:0 0 var(--space-4); color: var(--color-text-dim); line-height:1.5; }\n    .inline-instructions .steps { margin:0 0 var(--space-5); padding-left: 1.2em; display:flex; flex-direction:column; gap: var(--space-3); }\n    .inline-instructions .steps li { line-height:1.4; }\n    .inline-instructions .actions { display:flex; gap: var(--space-3); justify-content:flex-end; margin-top: var(--space-4); }\n    .btn-tertiary { background: rgba(255,255,255,0.08); border:1px solid rgba(255,255,255,0.15); color: var(--color-text); padding: var(--space-3) var(--space-5); border-radius: 10px; cursor:pointer; font-weight:500; }\n    .btn-tertiary:hover { background: rgba(255,255,255,0.12); }\n    .btn-accent { background: linear-gradient(135deg,#1db954,#1ed760); color:#fff; border:none; padding: var(--space-3) var(--space-5); border-radius: 10px; cursor:pointer; font-weight:600; box-shadow: 0 4px 18px -4px rgba(29,185,84,0.5); }\n    .btn-accent:hover { filter: brightness(1.07); transform: translateY(-1px); }\n    .privacy { display:block; margin-top: var(--space-4); font-size:12px; color: var(--color-text-dim); }\n    \n    /* Authentication Modal Styles */\n    .auth-modal-overlay {\n      position: fixed;\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      background: rgba(0, 0, 0, 0.8);\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      z-index: 10000;\n      animation: fadeIn 0.3s ease;\n    }\n    \n    .auth-modal {\n      background: linear-gradient(145deg, rgba(25, 35, 45, 0.95), rgba(15, 22, 30, 0.95));\n      backdrop-filter: blur(20px);\n      border: 1px solid rgba(255, 255, 255, 0.1);\n      border-radius: 20px;\n      width: 90%;\n      max-width: 400px;\n      max-height: 90vh;\n      overflow-y: auto;\n      box-shadow: 0 20px 40px rgba(0, 0, 0, 0.6);\n      animation: slideIn 0.3s ease;\n    }\n    \n    .auth-modal-header {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      padding: 24px 24px 0;\n      margin-bottom: 24px;\n    }\n    \n    .auth-modal-header h2 {\n      margin: 0;\n      font-size: 24px;\n      font-weight: 600;\n      background: var(--gradient-accent);\n      -webkit-background-clip: text;\n      -webkit-text-fill-color: transparent;\n      background-clip: text;\n    }\n    \n    .close-btn {\n      background: none;\n      border: none;\n      color: var(--color-text-dim);\n      font-size: 28px;\n      cursor: pointer;\n      line-height: 1;\n      padding: 4px;\n      border-radius: 6px;\n      transition: all 0.2s ease;\n    }\n    \n    .close-btn:hover {\n      background: rgba(255, 255, 255, 0.1);\n      color: var(--color-text);\n    }\n    \n    .auth-modal-content {\n      padding: 0 24px 24px;\n    }\n    \n    .auth-error {\n      background: rgba(220, 53, 69, 0.15);\n      border: 1px solid rgba(220, 53, 69, 0.3);\n      color: #ff6b6b;\n      padding: 12px 16px;\n      border-radius: 10px;\n      margin-bottom: 20px;\n      font-size: 14px;\n    }\n    \n    .auth-form {\n      display: flex;\n      flex-direction: column;\n      gap: 20px;\n    }\n    \n    .form-group {\n      display: flex;\n      flex-direction: column;\n      gap: 6px;\n    }\n    \n    .form-group label {\n      font-weight: 500;\n      color: var(--color-text);\n      font-size: 14px;\n    }\n    \n    .form-control {\n      background: rgba(255, 255, 255, 0.05);\n      border: 1px solid rgba(255, 255, 255, 0.15);\n      border-radius: 10px;\n      padding: 12px 16px;\n      color: var(--color-text);\n      font-size: 16px;\n      transition: all 0.2s ease;\n    }\n    \n    .form-control:focus {\n      outline: none;\n      border-color: #1db954;\n      background: rgba(255, 255, 255, 0.08);\n      box-shadow: 0 0 0 2px rgba(29, 185, 84, 0.2);\n    }\n    \n    .form-control::placeholder {\n      color: var(--color-text-dim);\n    }\n    \n    .auth-submit-btn {\n      background: linear-gradient(135deg, #1db954, #1ed760);\n      color: white;\n      border: none;\n      border-radius: 10px;\n      padding: 14px 20px;\n      font-size: 16px;\n      font-weight: 600;\n      cursor: pointer;\n      transition: all 0.2s ease;\n      box-shadow: 0 4px 18px -4px rgba(29, 185, 84, 0.4);\n    }\n    \n    .auth-submit-btn:hover:not(:disabled) {\n      filter: brightness(1.1);\n      transform: translateY(-1px);\n      box-shadow: 0 6px 24px -4px rgba(29, 185, 84, 0.5);\n    }\n    \n    .auth-submit-btn:disabled {\n      opacity: 0.6;\n      cursor: not-allowed;\n      transform: none;\n    }\n    \n    .auth-links {\n      display: flex;\n      flex-direction: column;\n      gap: 8px;\n      align-items: center;\n      margin-top: 8px;\n    }\n    \n    .link-btn {\n      background: none;\n      border: none;\n      color: var(--color-accent);\n      cursor: pointer;\n      font-size: 14px;\n      text-decoration: underline;\n      transition: color 0.2s ease;\n    }\n    \n    .link-btn:hover {\n      color: #1ed760;\n    }\n    \n    .user-icon {\n      font-size: 18px;\n    }\n    \n    .unverified-badge {\n      background: #ffa500;\n      color: white;\n      font-size: 12px;\n      font-weight: bold;\n      border-radius: 50%;\n      width: 16px;\n      height: 16px;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      margin-left: 4px;\n    }\n    \n    .menu-warning {\n      color: #ffa500;\n      font-size: 13px;\n      padding: 8px 0;\n      border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n      margin-bottom: 8px;\n    }\n    \n    @keyframes fadeIn { from { opacity:0; transform: translateY(8px);} to { opacity:1; transform: translateY(0);} }\n    @keyframes slideIn { from { opacity:0; transform: scale(0.95) translateY(-20px);} to { opacity:1; transform: scale(1) translateY(0);} }\n  `],\n    template: `\n    <div class=\"app-shell\">\n      <aside class=\"app-sidebar\">\n        <audiora-sidebar\n          [sessionId]=\"sessionId()\"\n          [spotifyPlaylists]=\"spotifyPlaylists()\"\n          [youtubePlaylists]=\"youtubePlaylists()\"\n          [backendConnected]=\"backendConnected()\"\n          (connectSpotify)=\"loginSpotify()\"\n          (connectYouTube)=\"loginYouTube()\"\n          (playSpotifyPlaylist)=\"playSpotifyPlaylist($event)\"\n          (selectYouTubePlaylist)=\"selectYouTubePlaylist($event)\"\n          (viewLikedSongs)=\"showLikedSongs()\"\n          (clear)=\"clearSession()\"\n        />\n      </aside>\n  <main class=\"app-main\">\n        <header class=\"main-header\">\n          <div class=\"header-top\">\n            <h1 class=\"page-title\">Audiora</h1>\n            <div class=\"header-controls\">\n              <nav class=\"nav-tabs\" *ngIf=\"sessionId()\">\n                <button type=\"button\" class=\"nav-tab\" [class.active]=\"activeTab()==='for-you'\" (click)=\"setTab('for-you')\">For You</button>\n                <button type=\"button\" class=\"nav-tab\" [class.active]=\"activeTab()==='library'\" (click)=\"setTab('library')\">Your Library</button>\n                <button type=\"button\" class=\"nav-tab\" [class.active]=\"activeTab()==='playlists'\" (click)=\"setTab('playlists')\">Playlists</button>\n              </nav>\n\n              <!-- Simplified Authentication section -->\n              <div class=\"auth-compact\" *ngIf=\"!auth.isLoading() && !auth.isAuthenticated()\">\n                <button type=\"button\" class=\"auth-btn\" (click)=\"showAuthModal = true\">\n                  <span class=\"user-icon\">👤</span>\n                  <span>Sign in</span>\n                </button>\n              </div>\n              <div class=\"auth-compact user\" *ngIf=\"!auth.isLoading() && auth.isAuthenticated()\">\n                <button type=\"button\" class=\"user-chip\" (click)=\"toggleUserMenu()\" [title]=\"auth.userEmail()\">\n                  <span class=\"avatar-fallback\">{{ auth.userName().charAt(0).toUpperCase() }}</span>\n                  <span class=\"chip-name\">{{ shortUserName() }}</span>\n                  <span *ngIf=\"!auth.isVerified()\" class=\"unverified-badge\" title=\"Email not verified\">!</span>\n                </button>\n                <div *ngIf=\"showUserMenu\" class=\"user-menu\" (mouseleave)=\"showUserMenu=false\">\n                  <div class=\"menu-header\">Signed in as<br><strong>{{ auth.userEmail() }}</strong></div>\n                  <div *ngIf=\"!auth.isVerified()\" class=\"menu-warning\">⚠️ Please verify your email</div>\n                  <button class=\"menu-item\" (click)=\"likedSongs.manualSync()\">Sync Liked Songs</button>\n                  <button class=\"menu-item\" (click)=\"auth.logout()\">Sign out</button>\n                </div>\n              </div>\n              <div class=\"auth-loading\" *ngIf=\"auth.isLoading()\">\n                <div class=\"loading-spinner small\"></div>\n              </div>\n\n        <!-- Auth Modal -->\n        <div *ngIf=\"showAuthModal\" class=\"auth-modal-overlay\" (click)=\"closeAuthModal()\">\n          <div class=\"auth-modal\" (click)=\"$event.stopPropagation()\">\n            <div class=\"auth-modal-header\">\n              <h2>{{ authMode === 'login' ? 'Sign In' : 'Create Account' }}</h2>\n              <button class=\"close-btn\" (click)=\"closeAuthModal()\">×</button>\n            </div>\n            \n            <div class=\"auth-modal-content\">\n              <div *ngIf=\"authError()\" class=\"auth-error\">{{ authError() }}</div>\n              \n              <!-- Login Form -->\n              <form *ngIf=\"authMode === 'login'\" (submit)=\"handleLogin($event)\" class=\"auth-form\">\n                <div class=\"form-group\">\n                  <label for=\"email\">Email</label>\n                  <input type=\"email\" id=\"email\" [(ngModel)]=\"loginForm.email\" name=\"email\" required \n                         class=\"form-control\" placeholder=\"Enter your email\">\n                </div>\n                <div class=\"form-group\">\n                  <label for=\"password\">Password</label>\n                  <input type=\"password\" id=\"password\" [(ngModel)]=\"loginForm.password\" name=\"password\" required \n                         class=\"form-control\" placeholder=\"Enter your password\">\n                </div>\n                <button type=\"submit\" class=\"auth-submit-btn\" [disabled]=\"authLoading\">\n                  {{ authLoading ? 'Signing in...' : 'Sign In' }}\n                </button>\n                <div class=\"auth-links\">\n                  <button type=\"button\" (click)=\"authMode = 'register'\" class=\"link-btn\">\n                    Don't have an account? Sign up\n                  </button>\n                  <button type=\"button\" (click)=\"authMode = 'forgot'\" class=\"link-btn\">\n                    Forgot password?\n                  </button>\n                </div>\n              </form>\n              \n              <!-- Register Form -->\n              <form *ngIf=\"authMode === 'register'\" (submit)=\"handleRegister($event)\" class=\"auth-form\">\n                <div class=\"form-group\">\n                  <label for=\"reg-name\">Full Name</label>\n                  <input type=\"text\" id=\"reg-name\" [(ngModel)]=\"registerForm.name\" name=\"name\" required \n                         class=\"form-control\" placeholder=\"Enter your full name\">\n                </div>\n                <div class=\"form-group\">\n                  <label for=\"reg-email\">Email</label>\n                  <input type=\"email\" id=\"reg-email\" [(ngModel)]=\"registerForm.email\" name=\"email\" required \n                         class=\"form-control\" placeholder=\"Enter your email\">\n                </div>\n                <div class=\"form-group\">\n                  <label for=\"reg-password\">Password</label>\n                  <input type=\"password\" id=\"reg-password\" [(ngModel)]=\"registerForm.password\" name=\"password\" required \n                         class=\"form-control\" placeholder=\"Create a password\" minlength=\"6\">\n                </div>\n                <button type=\"submit\" class=\"auth-submit-btn\" [disabled]=\"authLoading\">\n                  {{ authLoading ? 'Creating account...' : 'Create Account' }}\n                </button>\n                <div class=\"auth-links\">\n                  <button type=\"button\" (click)=\"authMode = 'login'\" class=\"link-btn\">\n                    Already have an account? Sign in\n                  </button>\n                </div>\n              </form>\n              \n              <!-- Email Verification Form -->\n              <form *ngIf=\"authMode === 'verify'\" (submit)=\"handleEmailVerification($event)\" class=\"auth-form\">\n                <div class=\"verification-header\">\n                  <h3>Verify Your Email</h3>\n                  <p>We sent a 6-digit code to <strong>{{ verificationEmail }}</strong></p>\n                </div>\n                <div class=\"form-group\">\n                  <label for=\"verification-code\">Verification Code</label>\n                  <input type=\"text\" id=\"verification-code\" [(ngModel)]=\"verificationCode\" name=\"verificationCode\" required \n                         class=\"form-control verification-input\" placeholder=\"Enter 6-digit code\" maxlength=\"6\" \n                         pattern=\"[0-9]{6}\" autocomplete=\"off\">\n                </div>\n                <button type=\"submit\" class=\"auth-submit-btn\" [disabled]=\"authLoading\">\n                  {{ authLoading ? 'Verifying...' : 'Verify Email' }}\n                </button>\n                <div class=\"auth-links\">\n                  <button type=\"button\" (click)=\"resendVerificationCode()\" class=\"link-btn\" [disabled]=\"resendCooldown > 0\">\n                    {{ resendCooldown > 0 ? `,\n    Resend,\n    $\n  }, {\n    resendCooldown\n  }, s` : 'Resend code' }}\n                  </button>\n                  <button type=\"button\" (click)=\"authMode = 'login'\" class=\"link-btn\">\n                    Back to sign in\n                  </button>\n                </div>\n              </form>\n              \n              <!-- Forgot Password Form -->\n              <form *ngIf=\"authMode === 'forgot'\" (submit)=\"handleForgotPassword($event)\" class=\"auth-form\">\n                <div class=\"form-group\">\n                  <label for=\"forgot-email\">Email</label>\n                  <input type=\"email\" id=\"forgot-email\" [(ngModel)]=\"forgotEmail\" name=\"forgotEmail\" required \n                         class=\"form-control\" placeholder=\"Enter your email\">\n                </div>\n                <button type=\"submit\" class=\"auth-submit-btn\" [disabled]=\"authLoading\">\n                  {{ authLoading ? 'Sending...' : 'Send Reset Link' }}\n                </button>\n                <div class=\"auth-links\">\n                  <button type=\"button\" (click)=\"authMode = 'login'\" class=\"link-btn\">\n                    Back to sign in\n                  </button>\n                </div>\n              </form>\n            </div>\n          </div>\n        </div>\n            </div>\n          </div>\n        </header>\n\n        <!-- Hero section with large artwork (when playing) -->\n        <section *ngIf=\"sessionId() && nowPlaying()\" class=\"hero-section\">\n          <div class=\"hero-content\">\n            <div class=\"hero-artwork\">\n              <img *ngIf=\"nowPlaying()?.image\" [src]=\"nowPlaying()?.image\" [alt]=\"nowPlaying()?.title\" />\n              <div *ngIf=\"!nowPlaying()?.image\" class=\"artwork-placeholder\">♪</div>\n            </div>\n            <div class=\"hero-info\">\n              <h2 class=\"hero-title\">{{ nowPlaying()?.title || 'Deep Intence' }}</h2>\n              <div class=\"hero-controls\">\n                <button class=\"hero-btn primary\">Like</button>\n                <button class=\"hero-btn\">Following</button>\n                <button class=\"hero-btn\">⚡</button>\n              </div>\n            </div>\n          </div>\n        </section>\n\n        <!-- Inline Spotify Connection Instructions -->\n        <section *ngIf=\"showSpotifyHelp()\" class=\"inline-instructions-section\">\n          <div class=\"inline-instructions\">\n            <div class=\"inline-header\">\n              <h2>Connect Spotify</h2>\n              <button class=\"inline-close\" (click)=\"cancelSpotifyHelp()\" aria-label=\"Close\">×</button>\n            </div>\n            <p class=\"intro\">Link your Spotify account to import playlists and enable unified playback.</p>\n            <ol class=\"steps\">\n              <li><strong>Sign in</strong> with Google first (top-right) if not already.</li>\n              <li>Click <strong>Continue with Spotify</strong> below to open Spotify authorization.</li>\n              <li><strong>Authorize</strong> read access so we can list your playlists.</li>\n              <li>Return automatically—your Spotify playlists will appear in the sidebar.</li>\n            </ol>\n            <div class=\"actions\">\n              <button class=\"btn-tertiary\" (click)=\"cancelSpotifyHelp()\">Cancel</button>\n              <button class=\"btn-accent\" (click)=\"beginSpotifyAuth()\">Continue with Spotify ♪</button>\n            </div>\n            <small class=\"privacy\">Read-only: we never modify or post to your Spotify account.</small>\n          </div>\n        </section>\n\n        <!-- Track list section for search results -->\n        <section *ngIf=\"sessionId() && !selectedPlaylist() && (spotifyResults().length || youtubeResults().length)\" class=\"tracklist-section\">\n          <div class=\"tracklist-header\">\n            <div class=\"track-column-headers\">\n              <div class=\"col-index\">#</div>\n              <div class=\"col-title\">Title</div>\n              <div class=\"col-album\">Album</div>\n              <div class=\"col-like\">♡</div>\n              <div class=\"col-duration\">⏱</div>\n            </div>\n          </div>\n          <div class=\"tracklist-content\">\n            <!-- Spotify tracks -->\n            <div *ngFor=\"let t of spotifyResults(); let i = index\" class=\"track-row list-item smooth-transition gpu-accelerated\" (click)=\"playSpotifyTrack(t)\" (dblclick)=\"enqueueSpotifyTrack(t)\" [style.animation-delay.s]=\"i * 0.05\">\n              <div class=\"col-index\">{{ i + 1 }}</div>\n              <div class=\"col-title\">\n                <div class=\"track-title\">{{ t.name }}</div>\n                <div class=\"track-artist\">{{ t.artists?.join(', ') || 'Unknown Artist' }}</div>\n              </div>\n              <div class=\"col-album\">{{ t.album || '-' }}</div>\n              <div class=\"col-like\">\n                <button class=\"track-like-btn\" [class.liked]=\"isTrackLiked(t, 'spotify')\" (click)=\"$event.stopPropagation(); toggleTrackLike(t, 'spotify')\" title=\"Like\">\n                  {{ isTrackLiked(t, 'spotify') ? '♥' : '♡' }}\n                </button>\n              </div>\n              <div class=\"col-duration\">{{ formatDuration(t.durationMs) }}</div>\n            </div>\n            <!-- YouTube tracks -->\n            <div *ngFor=\"let v of youtubeResults(); let i = index\" class=\"track-row list-item smooth-transition gpu-accelerated\" (click)=\"playYouTubeVideo(v)\" (dblclick)=\"enqueueYouTubeVideo(v)\" [style.animation-delay.s]=\"i * 0.05\">\n              <div class=\"col-index\">{{ spotifyResults().length + i + 1 }}</div>\n              <div class=\"col-title\">\n                <div class=\"track-title\">{{ v.title }}</div>\n                <div class=\"track-artist\">{{ v.channel || 'YouTube' }}</div>\n              </div>\n              <div class=\"col-album\">YouTube</div>\n              <div class=\"col-like\">\n                <button class=\"track-like-btn\" [class.liked]=\"isTrackLiked(v, 'youtube')\" (click)=\"$event.stopPropagation(); toggleTrackLike(v, 'youtube')\" title=\"Like\">\n                  {{ isTrackLiked(v, 'youtube') ? '♥' : '♡' }}\n                </button>\n              </div>\n              <div class=\"col-duration\">-</div>\n            </div>\n          </div>\n        </section>\n\n        <!-- Playlist tracks section -->\n        <section *ngIf=\"sessionId() && (selectedPlaylist() || viewingLikedSongs()) && playlistTracks().length\" class=\"tracklist-section\">\n          <div class=\"playlist-header\" *ngIf=\"selectedPlaylist()\">\n            <div class=\"playlist-info-header\">\n              <div class=\"playlist-cover-large\">\n                <img *ngIf=\"selectedPlaylist()?.image\" [src]=\"selectedPlaylist()?.image\" [alt]=\"selectedPlaylist()?.name\" class=\"cover-image\">\n                <div *ngIf=\"!selectedPlaylist()?.image\" class=\"cover-placeholder\" [class.spotify]=\"playlistProvider() === 'spotify'\" [class.youtube]=\"playlistProvider() === 'youtube'\">\n                  {{ playlistProvider() === 'spotify' ? '♪' : '▶' }}\n                </div>\n              </div>\n              <div class=\"playlist-details\">\n                <h2 class=\"playlist-title\">{{ selectedPlaylist()?.name }}</h2>\n                <p class=\"playlist-meta\">{{ selectedPlaylist()?.tracks }} {{ playlistProvider() === 'spotify' ? 'songs' : 'videos' }}</p>\n                <div class=\"playlist-actions\">\n                  <button class=\"play-all-btn\" (click)=\"playPlaylistFromStart()\">\n                    <span class=\"play-icon\">▶</span>\n                    Play All\n                  </button>\n                  <button class=\"back-btn\" (click)=\"clearPlaylistSelection()\">← Back</button>\n                </div>\n              </div>\n            </div>\n          </div>\n          <!-- Liked songs header -->\n          <div class=\"playlist-header\" *ngIf=\"viewingLikedSongs()\">\n            <div class=\"playlist-info-header\">\n              <div class=\"playlist-cover-large\">\n                <div class=\"cover-placeholder liked\">♥</div>\n              </div>\n              <div class=\"playlist-details\">\n                <h2 class=\"playlist-title\">Liked Songs</h2>\n                <p class=\"playlist-meta\">{{ playlistTracks().length }} liked songs</p>\n                <div class=\"playlist-actions\">\n                  <button class=\"play-all-btn\" (click)=\"playPlaylistFromStart()\">\n                    <span class=\"play-icon\">▶</span>\n                    Play All\n                  </button>\n                  <button class=\"back-btn\" (click)=\"clearPlaylistSelection()\">← Back</button>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div class=\"tracklist-header\">\n            <div class=\"track-column-headers\">\n              <div class=\"col-index\">#</div>\n              <div class=\"col-title\">Title</div>\n              <div class=\"col-album\">Album</div>\n              <div class=\"col-like\">♡</div>\n              <div class=\"col-duration\">⏱</div>\n            </div>\n          </div>\n          <div class=\"tracklist-content\">\n            <div *ngFor=\"let track of playlistTracks(); let i = index\" class=\"track-row list-item smooth-transition gpu-accelerated\"\n                 (click)=\"playPlaylistTrack(track, i)\"\n                 (dblclick)=\"enqueuePlaylistTrack(track)\"\n                 [style.animation-delay.s]=\"i * 0.03\">\n              <div class=\"col-index\">{{ i + 1 }}</div>\n              <div class=\"col-title\">\n                <div class=\"track-title\">{{ getTrackTitle(track) }}</div>\n                <div class=\"track-artist\">{{ getTrackArtist(track) }}</div>\n              </div>\n              <div class=\"col-album\">{{ getTrackAlbum(track) }}</div>\n              <div class=\"col-like\">\n                <button class=\"track-like-btn\" [class.liked]=\"isPlaylistTrackLiked(track)\" (click)=\"$event.stopPropagation(); togglePlaylistTrackLike(track)\" title=\"Like\">\n                  {{ isPlaylistTrackLiked(track) ? '♥' : '♡' }}\n                </button>\n              </div>\n              <div class=\"col-duration\">{{ getTrackDuration(track) }}</div>\n            </div>\n          </div>\n        </section>\n\n        <!-- Album carousel for For You tab -->\n        <audiora-album-carousel *ngIf=\"sessionId() && activeTab()==='for-you'\" [spotify]=\"spotifyResults()\" [youtube]=\"youtubeResults()\"></audiora-album-carousel>\n\n        <!-- Library tab content -->\n        <section *ngIf=\"sessionId() && activeTab()==='library'\" class=\"panel liquid-glass-enhanced\">\n          <h2 class=\"panel-title\">Your Library</h2>\n          <div class=\"library-content\">\n            <div class=\"library-section\" *ngIf=\"likedSongs.likedTracks().length\">\n              <h3>Liked Songs</h3>\n              <div class=\"liked-songs-preview\" (click)=\"showLikedSongs()\">\n                <div class=\"liked-cover\">♥</div>\n                <div class=\"liked-info\">\n                  <div class=\"liked-title\">Liked Songs</div>\n                  <div class=\"liked-count\">{{ likedSongs.likedTracks().length }} songs</div>\n                </div>\n              </div>\n            </div>\n            <div class=\"library-section\" *ngIf=\"!likedSongs.likedTracks().length\">\n              <div class=\"empty-state\">\n                <div class=\"empty-icon\">📚</div>\n                <p>Start building your library by liking songs!</p>\n                <p class=\"muted\">Search for music and click the heart icon to add tracks to your library.</p>\n              </div>\n            </div>\n          </div>\n        </section>\n\n        <!-- Playlists tab content -->\n        <section *ngIf=\"sessionId() && activeTab()==='playlists'\" class=\"panel liquid-glass-enhanced\">\n          <h2 class=\"panel-title\">Your Playlists</h2>\n          <div class=\"playlists-content\">\n            <div class=\"playlists-grid\" *ngIf=\"spotifyPlaylists().length || youtubePlaylists().length\">\n              <div *ngFor=\"let playlist of spotifyPlaylists()\"\n                   class=\"playlist-card spotify\"\n                   (click)=\"playSpotifyPlaylist(playlist)\">\n                <div class=\"playlist-cover\">\n                  <img *ngIf=\"playlist.image\" [src]=\"playlist.image\" [alt]=\"playlist.name\">\n                  <div *ngIf=\"!playlist.image\" class=\"cover-placeholder\">♪</div>\n                </div>\n                <div class=\"playlist-info\">\n                  <div class=\"playlist-name\">{{ playlist.name }}</div>\n                  <div class=\"playlist-meta\">{{ playlist.tracks }} songs • Spotify</div>\n                </div>\n              </div>\n              <div *ngFor=\"let playlist of youtubePlaylists()\"\n                   class=\"playlist-card youtube\"\n                   (click)=\"selectYouTubePlaylist(playlist)\">\n                <div class=\"playlist-cover\">\n                  <img *ngIf=\"playlist.image\" [src]=\"playlist.image\" [alt]=\"playlist.name\">\n                  <div *ngIf=\"!playlist.image\" class=\"cover-placeholder\">▶</div>\n                </div>\n                <div class=\"playlist-info\">\n                  <div class=\"playlist-name\">{{ playlist.name }}</div>\n                  <div class=\"playlist-meta\">{{ playlist.tracks }} videos • YouTube</div>\n                </div>\n              </div>\n            </div>\n            <div class=\"empty-state\" *ngIf=\"!spotifyPlaylists().length && !youtubePlaylists().length\">\n              <div class=\"empty-icon\">🎵</div>\n              <p>No playlists connected yet</p>\n              <p class=\"muted\">Connect your Spotify or YouTube account to view your playlists.</p>\n            </div>\n          </div>\n        </section>\n\n        <!-- Search section (when no tracks loaded and no playlist or liked songs selected) -->\n        <section *ngIf=\"sessionId() && !selectedPlaylist() && !viewingLikedSongs() && !spotifyResults().length && !youtubeResults().length\" class=\"search-section panel liquid-glass-enhanced\">\n          <h2 class=\"panel-title\">Search Music</h2>\n          <form (submit)=\"doSearch($event)\" class=\"search-form\">\n            <input class=\"search-input\" type=\"text\" placeholder=\"Search for tracks, artists, albums...\" [(ngModel)]=\"searchQuery\" name=\"q\" required />\n            <select class=\"search-select\" [(ngModel)]=\"searchProvider\" name=\"provider\">\n              <option value=\"both\">Both Providers</option>\n              <option value=\"spotify\">Spotify</option>\n              <option value=\"youtube\">YouTube</option>\n            </select>\n            <button class=\"search-btn\" type=\"submit\" [disabled]=\"searching\">{{ searching ? 'Searching…' : 'Search' }}</button>\n          </form>\n        </section>\n        <ng-template #noSession>\n          <div class=\"hero panel liquid-glass-enhanced\">\n            <h2 class=\"panel-title\">Welcome to Audiora</h2>\n            <p class=\"muted\" style=\"max-width:520px;line-height:1.4\">Connect your Spotify and YouTube accounts to search, queue, and play tracks seamlessly. Start by clicking a provider on the left sidebar. Your session persists locally so you can pick up where you left off.</p>\n            <div class=\"hero-steps\">\n              <div class=\"step\">1. Connect a provider</div>\n              <div class=\"step\">2. Search for music</div>\n              <div class=\"step\">3. Click to play / Double-click to enqueue</div>\n            </div>\n          </div>\n        </ng-template>\n\n        <div *ngIf=\"authError()\" class=\"alert error\">Auth Error: {{ authError() }}</div>\n\n        <section *ngIf=\"youtubeItems().length\" class=\"panel liquid-glass-enhanced\">\n          <h3 class=\"panel-title\">YouTube Items ({{ selectedYouTubePlaylistId() }})</h3>\n          <ol class=\"yt-items\">\n            <li *ngFor=\"let v of youtubeItems()\">{{ v.position }}. {{ v.title }} <code>{{ v.videoId }}</code></li>\n          </ol>\n        </section>\n\n        <!-- Legacy Spotify playback control panel removed; bottom player & now-playing panel handle controls -->\n\n        <audiora-now-playing-panel />\n      </main>\n      <footer class=\"bottom-bar\" *ngIf=\"nowPlaying()\">\n        <audiora-bottom-player />\n      </footer>\n    </div>\n  `)];\n  let _classDescriptor;\n  let _classExtraInitializers = [];\n  let _classThis;\n  var _AppComponent = (_Class = class AppComponent {\n    shortUserName() {\n      const name = this.auth.userName();\n      if (!name) return 'User';\n      return name.split(' ')[0];\n    }\n    closeAuthModal() {\n      this.showAuthModal = false;\n      this.authMode = 'login';\n      this.authError.set(null);\n      this.authLoading = false;\n      this.loginForm = {\n        email: '',\n        password: ''\n      };\n      this.registerForm = {\n        name: '',\n        email: '',\n        password: ''\n      };\n      this.forgotEmail = '';\n    }\n    handleLogin(event) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        event.preventDefault();\n        _this.authLoading = true;\n        _this.authError.set(null);\n        try {\n          yield _this.auth.login({\n            email: _this.loginForm.email,\n            password: _this.loginForm.password\n          });\n          _this.closeAuthModal();\n        } catch (error) {\n          _this.authError.set(error.message || 'Login failed');\n        } finally {\n          _this.authLoading = false;\n        }\n      })();\n    }\n    handleRegister(event) {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        event.preventDefault();\n        _this2.authLoading = true;\n        _this2.authError.set(null);\n        try {\n          yield _this2.auth.register({\n            name: _this2.registerForm.name,\n            email: _this2.registerForm.email,\n            password: _this2.registerForm.password\n          });\n          _this2.closeAuthModal();\n          // Show success message or redirect to verification page\n          alert('Registration successful! Please check your email to verify your account.');\n        } catch (error) {\n          _this2.authError.set(error.message || 'Registration failed');\n        } finally {\n          _this2.authLoading = false;\n        }\n      })();\n    }\n    handleForgotPassword(event) {\n      var _this3 = this;\n      return _asyncToGenerator(function* () {\n        event.preventDefault();\n        _this3.authLoading = true;\n        _this3.authError.set(null);\n        try {\n          yield _this3.auth.forgotPassword(_this3.forgotEmail);\n          alert('Password reset link sent to your email!');\n          _this3.authMode = 'login';\n        } catch (error) {\n          _this3.authError.set(error.message || 'Failed to send reset email');\n        } finally {\n          _this3.authLoading = false;\n        }\n      })();\n    }\n    toggleUserMenu() {\n      this.showUserMenu = !this.showUserMenu;\n    }\n    // nowPlaying & barPlaying provided via getters instead of stored fields to avoid init order issues\n    get nowPlaying() {\n      return this.player.current;\n    }\n    get barPlaying() {\n      return this.player.isPlaying;\n    }\n    // Remove progress features for now to stabilize\n\n    constructor(http, player, spotifySdk, yt, likedSongs, auth, ngZone, router) {\n      var _this4 = this;\n      _defineProperty(this, \"http\", void 0);\n      _defineProperty(this, \"player\", void 0);\n      _defineProperty(this, \"spotifySdk\", void 0);\n      _defineProperty(this, \"yt\", void 0);\n      _defineProperty(this, \"likedSongs\", void 0);\n      _defineProperty(this, \"auth\", void 0);\n      _defineProperty(this, \"ngZone\", void 0);\n      _defineProperty(this, \"router\", void 0);\n      // Old manual flow signals kept (not used now) in case of fallback\n      _defineProperty(this, \"spotifyAuthUrl\", signal(null));\n      _defineProperty(this, \"youtubeAuthUrl\", signal(null));\n      _defineProperty(this, \"sessionId\", signal(null));\n      _defineProperty(this, \"spotifyPlaylists\", signal([]));\n      _defineProperty(this, \"youtubePlaylists\", signal([]));\n      _defineProperty(this, \"youtubeItems\", signal([]));\n      _defineProperty(this, \"selectedYouTubePlaylistId\", signal(null));\n      // Inline help panel state\n      _defineProperty(this, \"showSpotifyHelp\", signal(false));\n      // Playlist navigation state\n      _defineProperty(this, \"selectedPlaylist\", signal(null));\n      _defineProperty(this, \"playlistTracks\", signal([]));\n      _defineProperty(this, \"playlistProvider\", signal(null));\n      _defineProperty(this, \"viewingLikedSongs\", signal(false));\n      _defineProperty(this, \"playerState\", signal(null));\n      _defineProperty(this, \"authError\", signal(null));\n      _defineProperty(this, \"backendConnected\", signal(true));\n      // Track backend connection status\n      // Search state\n      _defineProperty(this, \"spotifyResults\", signal([]));\n      _defineProperty(this, \"youtubeResults\", signal([]));\n      _defineProperty(this, \"selectedYouTubeVideoId\", signal(null));\n      _defineProperty(this, \"searchQuery\", '');\n      _defineProperty(this, \"searchProvider\", 'both');\n      _defineProperty(this, \"searching\", false);\n      _defineProperty(this, \"activeTab\", signal('for-you'));\n      // auth compact UI state\n      _defineProperty(this, \"showUserMenu\", false);\n      // Authentication modal state\n      _defineProperty(this, \"showAuthModal\", false);\n      _defineProperty(this, \"authMode\", 'login');\n      _defineProperty(this, \"authLoading\", false);\n      // Form data\n      _defineProperty(this, \"loginForm\", {\n        email: '',\n        password: ''\n      });\n      _defineProperty(this, \"registerForm\", {\n        name: '',\n        email: '',\n        password: ''\n      });\n      _defineProperty(this, \"forgotEmail\", '');\n      _defineProperty(this, \"positionMs\", 0);\n      _defineProperty(this, \"durationMs\", 0);\n      _defineProperty(this, \"progressTimer\", void 0);\n      _defineProperty(this, \"backendBase\", `http://${window.location.hostname}:8080`);\n      this.http = http;\n      this.player = player;\n      this.spotifySdk = spotifySdk;\n      this.yt = yt;\n      this.likedSongs = likedSongs;\n      this.auth = auth;\n      this.ngZone = ngZone;\n      this.router = router;\n      this.initialSessionCapture();\n      // Provide callbacks to player service\n      this.player.setCallbacks({\n        onSpotifyPlay: function () {\n          var _ref = _asyncToGenerator(function* (track) {\n            if (!_this4.sessionId()) return false;\n            try {\n              const deviceId = _this4.spotifySdk.deviceId();\n              const url = deviceId ? `${_this4.backendBase}/api/spotify/player/play/track?deviceId=${encodeURIComponent(deviceId)}` : `${_this4.backendBase}/api/spotify/player/play/track`;\n              yield _this4.http.post(url, {\n                uri: track.uri\n              }, {\n                headers: _this4.authHeaders()\n              }).toPromise();\n              _this4.refreshState();\n              return true;\n            } catch (e) {\n              console.warn('Spotify play failed', e);\n              return false;\n            }\n          });\n          return function onSpotifyPlay(_x) {\n            return _ref.apply(this, arguments);\n          };\n        }(),\n        onSpotifyPause: function () {\n          var _ref2 = _asyncToGenerator(function* () {\n            if (!_this4.sessionId()) return false;\n            try {\n              yield _this4.http.post(`${_this4.backendBase}/api/spotify/player/pause`, {}, {\n                headers: _this4.authHeaders()\n              }).toPromise();\n              return true;\n            } catch {\n              return false;\n            }\n          });\n          return function onSpotifyPause() {\n            return _ref2.apply(this, arguments);\n          };\n        }(),\n        onYouTubePlay: function () {\n          var _ref3 = _asyncToGenerator(function* (video) {\n            _this4.selectedYouTubeVideoId.set(video.videoId);\n            yield _this4.yt.playVideo(video.videoId);\n            return true;\n          });\n          return function onYouTubePlay(_x2) {\n            return _ref3.apply(this, arguments);\n          };\n        }(),\n        onYouTubeStop: function () {\n          var _ref4 = _asyncToGenerator(function* () {\n            _this4.yt.pause();\n            _this4.selectedYouTubeVideoId.set(null);\n            return true;\n          });\n          return function onYouTubeStop() {\n            return _ref4.apply(this, arguments);\n          };\n        }()\n      });\n    }\n    setTab(tab) {\n      this.activeTab.set(tab);\n    }\n    ngOnInit() {\n      // Re-run once after Angular initializes (in case constructor ran before location updated)\n      if (!this.sessionId()) {\n        setTimeout(() => {\n          if (!this.sessionId()) this.initialSessionCapture();\n        }, 50);\n      }\n      this.startProgressLoop(); // keep placeholder; can be a no-op now\n      // Theme effect\n    }\n    initialSessionCapture() {\n      const search = window.location.search;\n      const hash = window.location.hash;\n      const params = new URLSearchParams(search);\n      let sid = params.get('sessionId');\n      const err = params.get('authError');\n      if (err) this.authError.set(err);\n      if (!sid && hash) {\n        const h = new URLSearchParams(hash.startsWith('#') ? hash.substring(1) : hash);\n        sid = h.get('sessionId') || sid;\n      }\n      // Fallback regex if URLSearchParams missed (edge cases with encoded ?)\n      if (!sid) {\n        const m = /(sessionId=)([A-Za-z0-9\\-]+)/.exec(search + hash);\n        if (m) sid = m[2];\n      }\n      const stored = localStorage.getItem('audiora_session');\n      if (!sid && stored) sid = stored;\n      if (sid) {\n        this.setSession(sid);\n      }\n      // Diagnostics in console\n      // eslint-disable-next-line no-console\n      console.debug('[Audiora] Session capture', {\n        search,\n        hash,\n        captured: sid,\n        stored\n      });\n      // If session already existed and playlists are not yet loaded (fresh app load), ensure fetch\n      if (this.sessionId() && !this.spotifyPlaylists().length && !this.youtubePlaylists().length) {\n        this.fetchSpotifyPlaylists();\n        this.fetchYouTubePlaylists();\n      }\n    }\n    loginSpotify() {\n      if (!this.spotifyPlaylists().length) {\n        this.showSpotifyHelp.set(true);\n        return;\n      }\n      this.startSpotifyAuth();\n    }\n    startSpotifyAuth() {\n      const sid = this.sessionId();\n      const url = sid ? `${this.backendBase}/auth/spotify/login?sessionId=${encodeURIComponent(sid)}` : `${this.backendBase}/auth/spotify/login`;\n      this.http.get(url).subscribe(r => window.location.href = r.authUrl);\n    }\n    beginSpotifyAuth() {\n      this.showSpotifyHelp.set(false);\n      this.startSpotifyAuth();\n    }\n    cancelSpotifyHelp() {\n      this.showSpotifyHelp.set(false);\n    }\n    loginYouTube() {\n      const sid = this.sessionId();\n      const url = sid ? `${this.backendBase}/auth/youtube/login?sessionId=${encodeURIComponent(sid)}` : `${this.backendBase}/auth/youtube/login`;\n      this.http.get(url).subscribe(r => window.location.href = r.authUrl);\n    }\n    setSession(id) {\n      this.sessionId.set(id);\n      localStorage.setItem('audiora_session', id);\n      // Auto-load playlists for both providers\n      this.fetchSpotifyPlaylists();\n      this.fetchYouTubePlaylists();\n    }\n    clearSession() {\n      this.sessionId.set(null);\n      localStorage.removeItem('audiora_session');\n      this.spotifyPlaylists.set([]);\n      this.youtubePlaylists.set([]);\n      this.youtubeItems.set([]);\n      this.playerState.set(null);\n    }\n    authHeaders() {\n      return {\n        'X-Session-Id': this.sessionId() || ''\n      };\n    }\n    fetchSpotifyPlaylists() {\n      if (!this.sessionId()) return;\n      this.http.get(`${this.backendBase}/api/spotify/playlists`, {\n        headers: this.authHeaders()\n      }).subscribe({\n        next: r => {\n          this.spotifyPlaylists.set(r.items || []);\n          this.backendConnected.set(true);\n          if ((r.items || []).length > 0 && this.showSpotifyHelp()) {\n            // Hide instructions once playlists are available\n            this.showSpotifyHelp.set(false);\n          }\n        },\n        error: err => {\n          console.log('Spotify playlists not available (may need Spotify connection):', err.status);\n          this.spotifyPlaylists.set([]);\n          if (err.status === 0) {\n            this.backendConnected.set(false);\n          }\n          // If user has a session but no playlists, show help panel automatically (unless explicitly dismissed)\n          if (this.sessionId() && !this.showSpotifyHelp()) {\n            this.showSpotifyHelp.set(true);\n          }\n        }\n      });\n    }\n    fetchYouTubePlaylists() {\n      if (!this.sessionId()) return;\n      this.http.get(`${this.backendBase}/api/youtube/playlists`, {\n        headers: this.authHeaders()\n      }).subscribe({\n        next: r => {\n          this.youtubePlaylists.set(r.items || []);\n          this.backendConnected.set(true);\n        },\n        error: err => {\n          console.log('YouTube playlists not available (may need YouTube connection):', err.status);\n          this.youtubePlaylists.set([]);\n          if (err.status === 0) {\n            this.backendConnected.set(false);\n          }\n        }\n      });\n    }\n    selectYouTubePlaylist(p) {\n      this.selectedPlaylist.set(p);\n      this.playlistProvider.set('youtube');\n      this.selectedYouTubePlaylistId.set(p.id);\n      this.fetchYouTubePlaylistTracks(p.id);\n    }\n    fetchYouTubePlaylistTracks(id) {\n      if (!this.sessionId()) return;\n      this.http.get(`${this.backendBase}/api/youtube/playlists/${id}/items`, {\n        headers: this.authHeaders()\n      }).subscribe({\n        next: r => {\n          this.playlistTracks.set(r.items || []);\n          this.youtubeItems.set(r.items || []); // Keep for backward compatibility\n        },\n        error: err => {\n          console.log('YouTube playlist tracks not available:', err.status);\n          this.playlistTracks.set([]);\n          this.youtubeItems.set([]);\n        }\n      });\n    }\n    fetchYouTubeItems(id) {\n      this.fetchYouTubePlaylistTracks(id); // Redirect to new method\n    }\n    playSpotifyPlaylist(p) {\n      this.selectedPlaylist.set(p);\n      this.playlistProvider.set('spotify');\n      this.fetchSpotifyPlaylistTracks(p.id);\n    }\n    fetchSpotifyPlaylistTracks(id) {\n      if (!this.sessionId()) return;\n      this.http.get(`${this.backendBase}/api/spotify/playlists/${id}/tracks`, {\n        headers: this.authHeaders()\n      }).subscribe(r => this.playlistTracks.set(r.items || []), error => {\n        console.warn('Failed to fetch Spotify playlist tracks, falling back to direct playback:', error);\n        // Fallback to original behavior - start playing the playlist immediately\n        const body = {\n          context_uri: `spotify:playlist:${id}`\n        };\n        this.http.post(`${this.backendBase}/api/spotify/player/play`, body, {\n          headers: this.authHeaders()\n        }).subscribe(() => this.refreshState());\n      });\n    }\n    // Removed old direct playback control wrappers (play/pause/next/previous/state)\n    // Bottom player + PlayerService handle playback. Keep refreshState utility for Spotify SDK play callback.\n    refreshState() {\n      if (!this.sessionId()) return;\n      this.http.get(`${this.backendBase}/api/spotify/player/state`, {\n        headers: this.authHeaders()\n      }).subscribe(r => this.playerState.set(r));\n    }\n    ensureSpotifySdkReady() {\n      var _this5 = this;\n      return _asyncToGenerator(function* () {\n        if (!_this5.sessionId()) return;\n        if (_this5.spotifySdk.ready()) return;\n        yield _this5.spotifySdk.load(/*#__PURE__*/_asyncToGenerator(function* () {\n          const r = yield _this5.http.get(`${_this5.backendBase}/api/spotify/player/access-token`, {\n            headers: _this5.authHeaders()\n          }).toPromise();\n          return r.accessToken;\n        }));\n        // Poll briefly for device\n        const start = Date.now();\n        while (!_this5.spotifySdk.deviceId() && Date.now() - start < 5000) {\n          yield new Promise(r => setTimeout(r, 250));\n        }\n        const deviceId = _this5.spotifySdk.deviceId();\n        if (deviceId) {\n          yield _this5.http.post(`${_this5.backendBase}/api/spotify/player/transfer`, {\n            deviceId,\n            play: false\n          }, {\n            headers: _this5.authHeaders()\n          }).toPromise();\n        } else {\n          console.warn('[Audiora] Spotify SDK device not ready after timeout');\n        }\n      })();\n    }\n    playSpotifyTrack(t) {\n      var _this6 = this;\n      return _asyncToGenerator(function* () {\n        yield _this6.ensureSpotifySdkReady();\n        const playable = {\n          provider: 'spotify',\n          uri: t.uri,\n          id: t.id,\n          title: t.name,\n          artists: t.artists || [],\n          album: t.album,\n          durationMs: t.durationMs,\n          image: t.image\n        };\n        _this6.player.play(playable, false);\n      })();\n    }\n    playYouTubeVideo(v) {\n      const playable = {\n        provider: 'youtube',\n        videoId: v.videoId,\n        title: v.title,\n        channel: v.channel,\n        image: v.thumbnail\n      };\n      this.player.play(playable, false);\n    }\n    enqueueSpotifyTrack(t) {\n      const playable = {\n        provider: 'spotify',\n        uri: t.uri,\n        id: t.id,\n        title: t.name,\n        artists: t.artists || [],\n        album: t.album,\n        durationMs: t.durationMs,\n        image: t.image\n      };\n      this.player.play(playable, true);\n    }\n    enqueueYouTubeVideo(v) {\n      const playable = {\n        provider: 'youtube',\n        videoId: v.videoId,\n        title: v.title,\n        channel: v.channel,\n        image: v.thumbnail\n      };\n      this.player.play(playable, true);\n    }\n    selectYouTubeVideo(v) {\n      this.playYouTubeVideo(v);\n    }\n    youtubeEmbedUrl() {\n      return '';\n    }\n    doSearch(ev) {\n      ev.preventDefault();\n      if (!this.sessionId() || !this.searchQuery.trim()) return;\n      this.searching = true;\n      const headers = this.authHeaders();\n      const tasks = [];\n      if (this.searchProvider === 'spotify' || this.searchProvider === 'both') {\n        tasks.push(this.http.get(`${this.backendBase}/api/spotify/search`, {\n          headers,\n          params: {\n            query: this.searchQuery,\n            limit: 10\n          }\n        }).toPromise());\n      } else {\n        this.spotifyResults.set([]);\n      }\n      if (this.searchProvider === 'youtube' || this.searchProvider === 'both') {\n        tasks.push(this.http.get(`${this.backendBase}/api/youtube/search`, {\n          headers,\n          params: {\n            query: this.searchQuery,\n            limit: 10\n          }\n        }).toPromise());\n      } else {\n        this.youtubeResults.set([]);\n      }\n      Promise.allSettled(tasks).then(results => {\n        // Order of tasks corresponds to providers conditionally\n        let spotifyHandled = false;\n        for (const res of results) {\n          if (res.status === 'fulfilled' && res.value && Array.isArray(res.value.items)) {\n            // Decide if it is spotify or youtube by shape heuristics\n            if (!spotifyHandled && res.value.items.length && res.value.items[0].uri) {\n              this.spotifyResults.set(res.value.items);\n              spotifyHandled = true;\n            } else if (res.value.items.length && (res.value.items[0].videoId || res.value.items[0].thumbnail !== undefined)) {\n              this.youtubeResults.set(res.value.items);\n            } else if (!spotifyHandled && this.searchProvider === 'spotify') {\n              this.spotifyResults.set(res.value.items);\n              spotifyHandled = true;\n            } else if (this.searchProvider === 'youtube') {\n              this.youtubeResults.set(res.value.items);\n            }\n          } else if (res.status === 'rejected') {\n            // Handle API errors\n            const error = res.reason;\n            if (error?.status === 401) {\n              console.warn('Search API not available (authentication required):', error.url);\n              if (error.url?.includes('/youtube/')) {\n                console.log('YouTube search requires YouTube connection. Connect YouTube Music in the sidebar to enable search.');\n              }\n              if (error.url?.includes('/spotify/')) {\n                console.log('Spotify search requires Spotify connection. Connect Spotify in the sidebar to enable search.');\n              }\n            } else {\n              console.error('Search API error:', error);\n            }\n          }\n        }\n      }).finally(() => this.searching = false);\n    }\n    startProgressLoop() {}\n    formatDuration(ms) {\n      if (!ms) return '-';\n      const totalSeconds = Math.floor(ms / 1000);\n      const minutes = Math.floor(totalSeconds / 60);\n      const seconds = totalSeconds % 60;\n      return `${minutes}:${seconds.toString().padStart(2, '0')}`;\n    }\n    // Playlist navigation methods\n    clearPlaylistSelection() {\n      this.selectedPlaylist.set(null);\n      this.playlistTracks.set([]);\n      this.playlistProvider.set(null);\n      this.viewingLikedSongs.set(false);\n    }\n    showLikedSongs() {\n      this.clearPlaylistSelection();\n      this.viewingLikedSongs.set(true);\n      this.playlistTracks.set(this.likedSongs.likedTracks());\n    }\n    playPlaylistFromStart() {\n      if (!this.playlistTracks().length) return;\n      const firstTrack = this.playlistTracks()[0];\n      this.playPlaylistTrack(firstTrack, 0);\n    }\n    playPlaylistTrack(track, index) {\n      if (this.viewingLikedSongs()) {\n        // Liked songs have their provider stored\n        if (track.provider === 'spotify') {\n          const spotifyTrack = {\n            id: track.id,\n            name: track.title,\n            artists: [track.artist],\n            album: track.album,\n            uri: track.uri,\n            durationMs: track.durationMs,\n            image: track.image,\n            provider: 'spotify'\n          };\n          this.playSpotifyTrack(spotifyTrack);\n        } else if (track.provider === 'youtube') {\n          const youtubeTrack = {\n            videoId: track.videoId || track.id,\n            title: track.title,\n            channel: track.artist,\n            thumbnail: track.image,\n            provider: 'youtube'\n          };\n          this.playYouTubeVideo(youtubeTrack);\n        }\n      } else if (this.playlistProvider() === 'spotify') {\n        this.playSpotifyTrack(track.track || track);\n      } else if (this.playlistProvider() === 'youtube') {\n        this.playYouTubeVideo(track);\n      }\n    }\n    enqueuePlaylistTrack(track) {\n      if (this.viewingLikedSongs()) {\n        // Similar logic for enqueuing liked songs\n        if (track.provider === 'spotify') {\n          const spotifyTrack = {\n            id: track.id,\n            name: track.title,\n            artists: [track.artist],\n            album: track.album,\n            uri: track.uri,\n            durationMs: track.durationMs,\n            image: track.image,\n            provider: 'spotify'\n          };\n          this.enqueueSpotifyTrack(spotifyTrack);\n        } else if (track.provider === 'youtube') {\n          const youtubeTrack = {\n            videoId: track.videoId || track.id,\n            title: track.title,\n            channel: track.artist,\n            thumbnail: track.image,\n            provider: 'youtube'\n          };\n          this.enqueueYouTubeVideo(youtubeTrack);\n        }\n      } else if (this.playlistProvider() === 'spotify') {\n        this.enqueueSpotifyTrack(track.track || track);\n      } else if (this.playlistProvider() === 'youtube') {\n        this.enqueueYouTubeVideo(track);\n      }\n    }\n    getTrackTitle(track) {\n      if (this.viewingLikedSongs()) {\n        return track.title || 'Unknown Track';\n      } else if (this.playlistProvider() === 'spotify') {\n        return track.track?.name || track.name || 'Unknown Track';\n      } else {\n        return track.title || 'Unknown Track';\n      }\n    }\n    getTrackArtist(track) {\n      if (this.viewingLikedSongs()) {\n        return track.artist || 'Unknown Artist';\n      } else if (this.playlistProvider() === 'spotify') {\n        const artists = track.track?.artists || track.artists;\n        return artists?.join(', ') || 'Unknown Artist';\n      } else {\n        return track.channel || 'YouTube';\n      }\n    }\n    getTrackAlbum(track) {\n      if (this.viewingLikedSongs()) {\n        return track.album || track.provider === 'youtube' ? 'YouTube' : '-';\n      } else if (this.playlistProvider() === 'spotify') {\n        return track.track?.album || track.album || '-';\n      } else {\n        return 'YouTube';\n      }\n    }\n    getTrackDuration(track) {\n      if (this.viewingLikedSongs()) {\n        return track.durationMs ? this.formatDuration(track.durationMs) : '-';\n      } else if (this.playlistProvider() === 'spotify') {\n        const ms = track.track?.durationMs || track.durationMs;\n        return this.formatDuration(ms);\n      } else {\n        return '-';\n      }\n    }\n    // Universal like functionality for track lists\n    isTrackLiked(track, provider) {\n      const trackId = provider === 'spotify' ? track.id : track.videoId || track.id;\n      return this.likedSongs.isLiked(trackId, provider);\n    }\n    toggleTrackLike(track, provider) {\n      var _this7 = this;\n      return _asyncToGenerator(function* () {\n        yield _this7.likedSongs.toggleLikeServer(track, provider);\n      })();\n    }\n    isPlaylistTrackLiked(track) {\n      if (this.viewingLikedSongs()) {\n        return true; // All tracks in liked songs are by definition liked\n      }\n      const provider = this.playlistProvider();\n      if (!provider) return false;\n      return this.isTrackLiked(track.track || track, provider);\n    }\n    togglePlaylistTrackLike(track) {\n      if (this.viewingLikedSongs()) {\n        // Remove from liked songs\n        this.likedSongs.toggleLike(track, track.provider);\n        // Update the displayed list\n        this.playlistTracks.set(this.likedSongs.likedTracks());\n      } else {\n        const provider = this.playlistProvider();\n        if (!provider) return;\n        this.toggleTrackLike(track.track || track, provider);\n      }\n    }\n  }, _classThis = _Class, (() => {\n    const _metadata = typeof Symbol === \"function\" && Symbol.metadata ? Object.create(null) : void 0;\n    __esDecorate(null, _classDescriptor = {\n      value: _classThis\n    }, _classDecorators, {\n      kind: \"class\",\n      name: _classThis.name,\n      metadata: _metadata\n    }, null, _classExtraInitializers);\n    _AppComponent = _classThis = _classDescriptor.value;\n    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: _metadata\n    });\n    __runInitializers(_classThis, _classExtraInitializers);\n  })(), _Class);\n  return _AppComponent = _classThis;\n})();\nexport { AppComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}