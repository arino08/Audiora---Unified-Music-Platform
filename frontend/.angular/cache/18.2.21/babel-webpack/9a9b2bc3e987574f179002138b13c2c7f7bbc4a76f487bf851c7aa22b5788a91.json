{"ast":null,"code":"import _asyncToGenerator from \"/home/ariz/DEV/Audiora/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _defineProperty from \"/home/ariz/DEV/Audiora/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { signal } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nexport let SpotifyWebSdkService = /*#__PURE__*/(() => {\n  var _SpotifyWebSdkService;\n  class SpotifyWebSdkService {\n    constructor() {\n      _defineProperty(this, \"scriptLoaded\", false);\n      _defineProperty(this, \"player\", void 0);\n      _defineProperty(this, \"deviceId\", signal(null));\n      _defineProperty(this, \"ready\", signal(false));\n      _defineProperty(this, \"error\", signal(null));\n    }\n    load(accessTokenProvider) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        if (_this.ready()) return;\n        if (!_this.scriptLoaded) {\n          yield _this.injectScript();\n          _this.scriptLoaded = true;\n        }\n        yield _this.initPlayer(accessTokenProvider);\n      })();\n    }\n    injectScript() {\n      return new Promise((resolve, reject) => {\n        const existing = document.querySelector('script[data-spotify-sdk]');\n        if (existing) {\n          resolve();\n          return;\n        }\n        const s = document.createElement('script');\n        s.src = 'https://sdk.scdn.co/spotify-player.js';\n        s.async = true;\n        s.defer = true;\n        s.setAttribute('data-spotify-sdk', '1');\n        s.onload = () => resolve();\n        s.onerror = e => reject(e);\n        document.head.appendChild(s);\n      });\n    }\n    initPlayer(accessTokenProvider) {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        yield _this2.waitForGlobal();\n        const tokenCb = /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (cb) {\n            try {\n              cb(yield accessTokenProvider());\n            } catch (e) {\n              _this2.error.set('token_fetch_failed');\n            }\n          });\n          return function tokenCb(_x) {\n            return _ref.apply(this, arguments);\n          };\n        }();\n        _this2.player = new window.Spotify.Player({\n          name: 'Audiora Web Player',\n          getOAuthToken: tokenCb,\n          volume: 0.8\n        });\n        _this2.player.addListener('ready', ({\n          device_id\n        }) => {\n          _this2.deviceId.set(device_id);\n          _this2.ready.set(true);\n        });\n        _this2.player.addListener('not_ready', ({\n          device_id\n        }) => {\n          if (_this2.deviceId() === device_id) _this2.ready.set(false);\n        });\n        _this2.player.addListener('initialization_error', ({\n          message\n        }) => _this2.error.set(message));\n        _this2.player.addListener('authentication_error', ({\n          message\n        }) => _this2.error.set(message));\n        _this2.player.addListener('account_error', ({\n          message\n        }) => _this2.error.set(message));\n        _this2.player.addListener('playback_error', ({\n          message\n        }) => _this2.error.set(message));\n        yield _this2.player.connect();\n      })();\n    }\n    waitForGlobal() {\n      return new Promise(resolve => {\n        if (window.Spotify && window.Spotify.Player) {\n          resolve();\n          return;\n        }\n        const iv = setInterval(() => {\n          if (window.Spotify && window.Spotify.Player) {\n            clearInterval(iv);\n            resolve();\n          }\n        }, 50);\n      });\n    }\n    togglePlay() {\n      var _this3 = this;\n      return _asyncToGenerator(function* () {\n        if (_this3.player) {\n          yield _this3.player.togglePlay();\n        }\n      })();\n    }\n    pause() {\n      var _this4 = this;\n      return _asyncToGenerator(function* () {\n        if (_this4.player) {\n          yield _this4.player.pause();\n        }\n      })();\n    }\n    resume() {\n      var _this5 = this;\n      return _asyncToGenerator(function* () {\n        if (_this5.player) {\n          yield _this5.player.resume();\n        }\n      })();\n    }\n    seek(ms) {\n      var _this6 = this;\n      return _asyncToGenerator(function* () {\n        if (_this6.player) {\n          yield _this6.player.seek(ms);\n        }\n      })();\n    }\n    getState() {\n      var _this7 = this;\n      return _asyncToGenerator(function* () {\n        return _this7.player ? _this7.player.getCurrentState() : null;\n      })();\n    }\n    setVolume(vol) {\n      var _this8 = this;\n      return _asyncToGenerator(function* () {\n        if (_this8.player) {\n          try {\n            yield _this8.player.setVolume(vol);\n          } catch {}\n        }\n      })();\n    }\n    getVolume() {\n      var _this9 = this;\n      return _asyncToGenerator(function* () {\n        if (!_this9.player) return null;\n        try {\n          return _this9.player.getVolume();\n        } catch {\n          return null;\n        }\n      })();\n    }\n  }\n  _SpotifyWebSdkService = SpotifyWebSdkService;\n  _defineProperty(SpotifyWebSdkService, \"\\u0275fac\", function SpotifyWebSdkService_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || _SpotifyWebSdkService)();\n  });\n  _defineProperty(SpotifyWebSdkService, \"\\u0275prov\", /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: _SpotifyWebSdkService,\n    factory: _SpotifyWebSdkService.ɵfac,\n    providedIn: 'root'\n  }));\n  return SpotifyWebSdkService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}