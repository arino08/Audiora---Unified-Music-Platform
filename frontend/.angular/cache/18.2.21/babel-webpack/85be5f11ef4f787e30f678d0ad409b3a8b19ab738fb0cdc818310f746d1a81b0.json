{"ast":null,"code":"import _asyncToGenerator from \"/home/ariz/DEV/Audiora/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _defineProperty from \"/home/ariz/DEV/Audiora/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nvar __esDecorate = this && this.__esDecorate || function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) {\n    if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\");\n    return f;\n  }\n  var kind = contextIn.kind,\n    key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _,\n    done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n    var context = {};\n    for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n    for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n    context.addInitializer = function (f) {\n      if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\");\n      extraInitializers.push(accept(f || null));\n    };\n    var result = (0, decorators[i])(kind === \"accessor\" ? {\n      get: descriptor.get,\n      set: descriptor.set\n    } : descriptor[key], context);\n    if (kind === \"accessor\") {\n      if (result === void 0) continue;\n      if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n      if (_ = accept(result.get)) descriptor.get = _;\n      if (_ = accept(result.set)) descriptor.set = _;\n      if (_ = accept(result.init)) initializers.unshift(_);\n    } else if (_ = accept(result)) {\n      if (kind === \"field\") initializers.unshift(_);else descriptor[key] = _;\n    }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\nvar __runInitializers = this && this.__runInitializers || function (thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n    value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\nimport { Component, signal } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nlet AppComponent = (_Class => {\n  let _classDecorators = [Component({\n    selector: 'app-root',\n    standalone: true,\n    imports: [CommonModule, HttpClientModule, FormsModule],\n    template: `\n    <h1>Audiora</h1>\n    <p>Unified music platform (Spotify + YouTube prototype)</p>\n    <section>\n      <button (click)=\"loginSpotify()\">Connect Spotify</button>\n    </section>\n    <section>\n      <button (click)=\"loginYouTube()\">Connect YouTube</button>\n    </section>\n    <section class=\"session\" *ngIf=\"sessionId(); else noSession\">\n      <p>Session: <code>{{ sessionId() }}</code> <button (click)=\"clearSession()\">Clear</button></p>\n      <div class=\"actions\" style=\"display:flex;gap:8px;flex-wrap:wrap;margin-bottom:12px;\">\n        <button (click)=\"fetchSpotifyPlaylists()\">Load Spotify Playlists</button>\n        <button (click)=\"fetchYouTubePlaylists()\">Load YouTube Playlists</button>\n      </div>\n      <section class=\"search-block\" style=\"border:2px solid #444;padding:12px;border-radius:8px;background:#1d1d1d;\">\n        <h2 style=\"margin-top:0;\">Search</h2>\n        <form (submit)=\"doSearch($event)\" style=\"display:flex;gap:8px;flex-wrap:wrap;align-items:center\">\n          <input style=\"flex:2;min-width:220px;\" type=\"text\" placeholder=\"Search tracks/videos\" [(ngModel)]=\"searchQuery\" name=\"q\" required />\n          <select [(ngModel)]=\"searchProvider\" name=\"provider\">\n            <option value=\"both\">Both</option>\n            <option value=\"spotify\">Spotify</option>\n            <option value=\"youtube\">YouTube</option>\n          </select>\n          <button type=\"submit\">Search</button>\n        </form>\n        <div *ngIf=\"searching\" style=\"margin-top:8px;\">Searching...</div>\n        <div class=\"results\" style=\"display:flex;gap:32px;align-items:flex-start;margin-top:12px;flex-wrap:wrap\">\n          <div *ngIf=\"spotifyResults().length\" style=\"flex:1;min-width:240px;\">\n            <h3 style=\"margin:4px 0 8px;\">Spotify Tracks</h3>\n            <ul style=\"list-style:none;padding:0;margin:0;\">\n              <li *ngFor=\"let t of spotifyResults()\" style=\"display:flex;align-items:center;gap:6px;margin:0 0 6px;padding:4px 6px;border-radius:4px;background:#2a2a2a;\">\n                <button (click)=\"playSpotifyTrack(t); $event.stopPropagation();\" title=\"Play\" style=\"padding:2px 6px;\">▶</button>\n                <div style=\"flex:1;cursor:pointer\" (click)=\"playSpotifyTrack(t)\">\n                  <strong>{{ t.name }}</strong><br/>\n                  <small>{{ t.artists.join(', ') }} • {{ t.album }}</small>\n                </div>\n              </li>\n            </ul>\n          </div>\n          <div *ngIf=\"youtubeResults().length\" style=\"flex:1;min-width:240px;\">\n            <h3 style=\"margin:4px 0 8px;\">YouTube Videos</h3>\n            <ul style=\"list-style:none;padding:0;margin:0;\">\n              <li *ngFor=\"let v of youtubeResults()\" style=\"display:flex;align-items:center;gap:6px;margin:0 0 6px;padding:4px 6px;border-radius:4px;background:#2a2a2a;\">\n                <button (click)=\"playYouTubeVideo(v); $event.stopPropagation();\" title=\"Play\" style=\"padding:2px 6px;\">▶</button>\n                <div style=\"flex:1;cursor:pointer\" (click)=\"playYouTubeVideo(v)\">\n                  <strong>{{ v.title }}</strong><br/>\n                  <small>{{ v.channel }}</small>\n                </div>\n              </li>\n            </ul>\n          </div>\n        </div>\n        <div *ngIf=\"selectedYouTubeVideoId()\" style=\"margin-top:16px\">\n          <h4 style=\"margin:0 0 8px;\">Playing YouTube: {{ selectedYouTubeVideoId() }}</h4>\n          <iframe width=\"420\" height=\"236\" [src]=\"youtubeEmbedUrl()\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n        </div>\n      </section>\n    </section>\n    <ng-template #noSession>\n      <div style=\"margin:12px 0;padding:12px;border:2px dashed #555;border-radius:8px;background:#1a1a1a;\">\n        <strong>No active session.</strong> Connect Spotify or YouTube above to enable search and playback.\n      </div>\n    </ng-template>\n\n    <div *ngIf=\"authError()\" style=\"background:#5d0000;color:#fff;padding:8px;margin:8px 0;\">Auth Error: {{ authError() }}</div>\n\n    <section *ngIf=\"spotifyPlaylists().length\">\n      <h2>Spotify Playlists</h2>\n      <ul>\n        <li *ngFor=\"let p of spotifyPlaylists()\" (click)=\"playSpotifyPlaylist(p)\" style=\"cursor:pointer\">\n          <strong>{{ p.name }}</strong> ({{ p.tracks }})\n        </li>\n      </ul>\n    </section>\n\n    <section *ngIf=\"youtubePlaylists().length\">\n      <h2>YouTube Playlists</h2>\n      <ul>\n        <li *ngFor=\"let p of youtubePlaylists()\" (click)=\"selectYouTubePlaylist(p)\" style=\"cursor:pointer\">\n          <strong>{{ p.name }}</strong> ({{ p.tracks }})\n        </li>\n      </ul>\n    </section>\n\n    <section *ngIf=\"youtubeItems().length\">\n      <h3>YouTube Items ({{ selectedYouTubePlaylistId() }})</h3>\n      <ol>\n        <li *ngFor=\"let v of youtubeItems()\">\n          {{ v.position }}. {{ v.title }} <code>{{ v.videoId }}</code>\n        </li>\n      </ol>\n    </section>\n\n    <section *ngIf=\"sessionId()\">\n      <h2 style=\"margin-top:28px;\">Spotify Playback Controls</h2>\n      <div class=\"controls\">\n        <button (click)=\"play()\">Play/Resume</button>\n        <button (click)=\"pause()\">Pause</button>\n        <button (click)=\"next()\">Next</button>\n        <button (click)=\"previous()\">Previous</button>\n        <button (click)=\"refreshState()\">State</button>\n      </div>\n      <pre *ngIf=\"playerState() as s\" style=\"background:#111;color:#0f0;padding:8px;max-height:300px;overflow:auto\">{{ s | json }}</pre>\n    </section>\n\n    <div *ngIf=\"nowPlaying()\" style=\"position:fixed;left:0;right:0;bottom:0;background:#111;padding:8px 12px;border-top:1px solid #333;display:flex;align-items:center;gap:12px;font-size:14px;\">\n      <img *ngIf=\"nowPlaying()?.image\" [src]=\"nowPlaying()?.image\" style=\"width:48px;height:48px;object-fit:cover;border-radius:4px;\" />\n      <div style=\"flex:1;min-width:0;\">\n        <div style=\"font-weight:600;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;\">{{ nowPlaying()?.title }}</div>\n        <div style=\"opacity:0.7;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;\" *ngIf=\"isSpotify(nowPlaying()) && nowPlaying()\">{{ ((nowPlaying() as any)?.artists || []).join(', ') }}</div>\n        <div style=\"opacity:0.6\">{{ nowPlaying()?.provider }}</div>\n        <div style=\"margin-top:4px;display:flex;align-items:center;gap:6px;\">\n          <input type=\"range\" min=\"0\" [max]=\"durationMs || 1\" [value]=\"positionMs\" (input)=\"onSeek($event)\" style=\"flex:1;\" />\n          <span style=\"font-size:12px;opacity:0.7;\">{{ formatTime(positionMs) }} / {{ formatTime(durationMs) }}</span>\n        </div>\n      </div>\n      <div style=\"display:flex;align-items:center;gap:6px;\">\n        <button (click)=\"prevFromBar()\" title=\"Previous\">⏮</button>\n        <button (click)=\"toggleBarPlay()\" title=\"Play/Pause\">{{ barPlaying() ? '⏸' : '▶' }}</button>\n        <button (click)=\"nextFromBar()\" title=\"Next\">⏭</button>\n      </div>\n    </div>\n  `\n  })];\n  let _classDescriptor;\n  let _classExtraInitializers = [];\n  let _classThis;\n  var _AppComponent = (_Class = class AppComponent {\n    // nowPlaying & barPlaying provided via getters instead of stored fields to avoid init order issues\n    get nowPlaying() {\n      return this.player.current;\n    }\n    get barPlaying() {\n      return this.player.isPlaying;\n    }\n    constructor(http, player, spotifySdk) {\n      var _this = this;\n      _defineProperty(this, \"http\", void 0);\n      _defineProperty(this, \"player\", void 0);\n      _defineProperty(this, \"spotifySdk\", void 0);\n      // Old manual flow signals kept (not used now) in case of fallback\n      _defineProperty(this, \"spotifyAuthUrl\", signal(null));\n      _defineProperty(this, \"youtubeAuthUrl\", signal(null));\n      _defineProperty(this, \"sessionId\", signal(null));\n      _defineProperty(this, \"spotifyPlaylists\", signal([]));\n      _defineProperty(this, \"youtubePlaylists\", signal([]));\n      _defineProperty(this, \"youtubeItems\", signal([]));\n      _defineProperty(this, \"selectedYouTubePlaylistId\", signal(null));\n      _defineProperty(this, \"playerState\", signal(null));\n      _defineProperty(this, \"authError\", signal(null));\n      // Search state\n      _defineProperty(this, \"spotifyResults\", signal([]));\n      _defineProperty(this, \"youtubeResults\", signal([]));\n      _defineProperty(this, \"selectedYouTubeVideoId\", signal(null));\n      _defineProperty(this, \"searchQuery\", '');\n      _defineProperty(this, \"searchProvider\", 'both');\n      _defineProperty(this, \"searching\", false);\n      _defineProperty(this, \"positionMs\", 0);\n      _defineProperty(this, \"durationMs\", 0);\n      _defineProperty(this, \"progressTimer\", void 0);\n      _defineProperty(this, \"backendBase\", `http://${window.location.hostname}:8080`);\n      this.http = http;\n      this.player = player;\n      this.spotifySdk = spotifySdk;\n      this.initialSessionCapture();\n      // Provide callbacks to player service\n      this.player.setCallbacks({\n        onSpotifyPlay: function () {\n          var _ref = _asyncToGenerator(function* (track) {\n            if (!_this.sessionId()) return false;\n            try {\n              yield _this.http.post(`${_this.backendBase}/api/spotify/player/play/track`, {\n                uri: track.uri\n              }, {\n                headers: _this.authHeaders()\n              }).toPromise();\n              _this.refreshState();\n              return true;\n            } catch (e) {\n              console.warn('Spotify play failed', e);\n              return false;\n            }\n          });\n          return function onSpotifyPlay(_x) {\n            return _ref.apply(this, arguments);\n          };\n        }(),\n        onSpotifyPause: function () {\n          var _ref2 = _asyncToGenerator(function* () {\n            if (!_this.sessionId()) return false;\n            try {\n              yield _this.http.post(`${_this.backendBase}/api/spotify/player/pause`, {}, {\n                headers: _this.authHeaders()\n              }).toPromise();\n              return true;\n            } catch {\n              return false;\n            }\n          });\n          return function onSpotifyPause() {\n            return _ref2.apply(this, arguments);\n          };\n        }(),\n        onYouTubePlay: function () {\n          var _ref3 = _asyncToGenerator(function* (video) {\n            _this.selectedYouTubeVideoId.set(video.videoId);\n            return true;\n          });\n          return function onYouTubePlay(_x2) {\n            return _ref3.apply(this, arguments);\n          };\n        }(),\n        onYouTubeStop: function () {\n          var _ref4 = _asyncToGenerator(function* () {\n            _this.selectedYouTubeVideoId.set(null);\n            return true;\n          });\n          return function onYouTubeStop() {\n            return _ref4.apply(this, arguments);\n          };\n        }()\n      });\n    }\n    ngOnInit() {\n      // Re-run once after Angular initializes (in case constructor ran before location updated)\n      if (!this.sessionId()) {\n        setTimeout(() => {\n          if (!this.sessionId()) this.initialSessionCapture();\n        }, 50);\n      }\n      this.startProgressLoop();\n    }\n    initialSessionCapture() {\n      const search = window.location.search;\n      const hash = window.location.hash;\n      const params = new URLSearchParams(search);\n      let sid = params.get('sessionId');\n      const err = params.get('authError');\n      if (err) this.authError.set(err);\n      if (!sid && hash) {\n        const h = new URLSearchParams(hash.startsWith('#') ? hash.substring(1) : hash);\n        sid = h.get('sessionId') || sid;\n      }\n      // Fallback regex if URLSearchParams missed (edge cases with encoded ?)\n      if (!sid) {\n        const m = /(sessionId=)([A-Za-z0-9\\-]+)/.exec(search + hash);\n        if (m) sid = m[2];\n      }\n      const stored = localStorage.getItem('audiora_session');\n      if (!sid && stored) sid = stored;\n      if (sid) {\n        this.setSession(sid);\n      }\n      // Diagnostics in console\n      // eslint-disable-next-line no-console\n      console.debug('[Audiora] Session capture', {\n        search,\n        hash,\n        captured: sid,\n        stored\n      });\n    }\n    loginSpotify() {\n      const sid = this.sessionId();\n      const url = sid ? `${this.backendBase}/auth/spotify/login?sessionId=${encodeURIComponent(sid)}` : `${this.backendBase}/auth/spotify/login`;\n      this.http.get(url).subscribe(r => window.location.href = r.authUrl);\n    }\n    loginYouTube() {\n      const sid = this.sessionId();\n      const url = sid ? `${this.backendBase}/auth/youtube/login?sessionId=${encodeURIComponent(sid)}` : `${this.backendBase}/auth/youtube/login`;\n      this.http.get(url).subscribe(r => window.location.href = r.authUrl);\n    }\n    setSession(id) {\n      this.sessionId.set(id);\n      localStorage.setItem('audiora_session', id);\n    }\n    clearSession() {\n      this.sessionId.set(null);\n      localStorage.removeItem('audiora_session');\n      this.spotifyPlaylists.set([]);\n      this.youtubePlaylists.set([]);\n      this.youtubeItems.set([]);\n      this.playerState.set(null);\n    }\n    authHeaders() {\n      return {\n        'X-Session-Id': this.sessionId() || ''\n      };\n    }\n    fetchSpotifyPlaylists() {\n      if (!this.sessionId()) return;\n      this.http.get(`${this.backendBase}/api/spotify/playlists`, {\n        headers: this.authHeaders()\n      }).subscribe(r => this.spotifyPlaylists.set(r.items || []));\n    }\n    fetchYouTubePlaylists() {\n      if (!this.sessionId()) return;\n      this.http.get(`${this.backendBase}/api/youtube/playlists`, {\n        headers: this.authHeaders()\n      }).subscribe(r => this.youtubePlaylists.set(r.items || []));\n    }\n    selectYouTubePlaylist(p) {\n      this.selectedYouTubePlaylistId.set(p.id);\n      this.fetchYouTubeItems(p.id);\n    }\n    fetchYouTubeItems(id) {\n      if (!this.sessionId()) return;\n      this.http.get(`${this.backendBase}/api/youtube/playlists/${id}/items`, {\n        headers: this.authHeaders()\n      }).subscribe(r => this.youtubeItems.set(r.items || []));\n    }\n    playSpotifyPlaylist(p) {\n      if (!this.sessionId()) return;\n      const body = {\n        context_uri: `spotify:playlist:${p.id}`\n      };\n      this.http.post(`${this.backendBase}/api/spotify/player/play`, body, {\n        headers: this.authHeaders()\n      }).subscribe(() => this.refreshState());\n    }\n    play() {\n      if (!this.sessionId()) return;\n      this.http.post(`${this.backendBase}/api/spotify/player/play`, {}, {\n        headers: this.authHeaders()\n      }).subscribe(() => this.refreshState());\n    }\n    pause() {\n      if (!this.sessionId()) return;\n      this.http.post(`${this.backendBase}/api/spotify/player/pause`, {}, {\n        headers: this.authHeaders()\n      }).subscribe(() => this.refreshState());\n    }\n    next() {\n      if (!this.sessionId()) return;\n      this.http.post(`${this.backendBase}/api/spotify/player/next`, {}, {\n        headers: this.authHeaders()\n      }).subscribe(() => this.refreshState());\n    }\n    previous() {\n      if (!this.sessionId()) return;\n      this.http.post(`${this.backendBase}/api/spotify/player/previous`, {}, {\n        headers: this.authHeaders()\n      }).subscribe(() => this.refreshState());\n    }\n    refreshState() {\n      if (!this.sessionId()) return;\n      this.http.get(`${this.backendBase}/api/spotify/player/state`, {\n        headers: this.authHeaders()\n      }).subscribe(r => this.playerState.set(r));\n    }\n    ensureSpotifySdkReady() {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        if (!_this2.sessionId()) return;\n        if (_this2.spotifySdk.ready()) return;\n        yield _this2.spotifySdk.load(/*#__PURE__*/_asyncToGenerator(function* () {\n          const r = yield _this2.http.get(`${_this2.backendBase}/api/spotify/player/access-token`, {\n            headers: _this2.authHeaders()\n          }).toPromise();\n          return r.accessToken;\n        }));\n        // transfer playback once device ready\n        const deviceId = _this2.spotifySdk.deviceId();\n        if (deviceId) {\n          yield _this2.http.post(`${_this2.backendBase}/api/spotify/player/transfer`, {\n            deviceId,\n            play: true\n          }, {\n            headers: _this2.authHeaders()\n          }).toPromise();\n        }\n      })();\n    }\n    playSpotifyTrack(t) {\n      var _this3 = this;\n      return _asyncToGenerator(function* () {\n        yield _this3.ensureSpotifySdkReady();\n        const playable = {\n          provider: 'spotify',\n          uri: t.uri,\n          id: t.id,\n          title: t.name,\n          artists: t.artists || [],\n          album: t.album,\n          durationMs: t.durationMs,\n          image: t.image\n        };\n        _this3.player.play(playable, false);\n      })();\n    }\n    playYouTubeVideo(v) {\n      const playable = {\n        provider: 'youtube',\n        videoId: v.videoId,\n        title: v.title,\n        channel: v.channel,\n        image: v.thumbnail\n      };\n      this.player.play(playable, false);\n    }\n    selectYouTubeVideo(v) {\n      this.playYouTubeVideo(v);\n    }\n    youtubeEmbedUrl() {\n      const id = this.selectedYouTubeVideoId();\n      return id ? `https://www.youtube.com/embed/${id}?autoplay=1` : '';\n    }\n    doSearch(ev) {\n      ev.preventDefault();\n      if (!this.sessionId() || !this.searchQuery.trim()) return;\n      this.searching = true;\n      const headers = this.authHeaders();\n      const tasks = [];\n      if (this.searchProvider === 'spotify' || this.searchProvider === 'both') {\n        tasks.push(this.http.get(`${this.backendBase}/api/spotify/search`, {\n          headers,\n          params: {\n            query: this.searchQuery,\n            limit: 10\n          }\n        }).toPromise());\n      } else {\n        this.spotifyResults.set([]);\n      }\n      if (this.searchProvider === 'youtube' || this.searchProvider === 'both') {\n        tasks.push(this.http.get(`${this.backendBase}/api/youtube/search`, {\n          headers,\n          params: {\n            query: this.searchQuery,\n            limit: 10\n          }\n        }).toPromise());\n      } else {\n        this.youtubeResults.set([]);\n      }\n      Promise.allSettled(tasks).then(results => {\n        // Order of tasks corresponds to providers conditionally\n        let spotifyHandled = false;\n        for (const res of results) {\n          if (res.status === 'fulfilled' && res.value && Array.isArray(res.value.items)) {\n            // Decide if it is spotify or youtube by shape heuristics\n            if (!spotifyHandled && res.value.items.length && res.value.items[0].uri) {\n              this.spotifyResults.set(res.value.items);\n              spotifyHandled = true;\n            } else if (res.value.items.length && (res.value.items[0].videoId || res.value.items[0].thumbnail !== undefined)) {\n              this.youtubeResults.set(res.value.items);\n            } else if (!spotifyHandled && this.searchProvider === 'spotify') {\n              this.spotifyResults.set(res.value.items);\n              spotifyHandled = true;\n            } else if (this.searchProvider === 'youtube') {\n              this.youtubeResults.set(res.value.items);\n            }\n          }\n        }\n      }).finally(() => this.searching = false);\n    }\n    startProgressLoop() {\n      var _this4 = this;\n      if (this.progressTimer) clearInterval(this.progressTimer);\n      this.progressTimer = setInterval(/*#__PURE__*/_asyncToGenerator(function* () {\n        const current = _this4.nowPlaying();\n        if (!current) {\n          _this4.positionMs = 0;\n          _this4.durationMs = 0;\n          return;\n        }\n        if (current.provider === 'spotify') {\n          const state = yield _this4.spotifySdk.getState();\n          if (state && state.position != null) {\n            _this4.positionMs = state.position;\n            _this4.durationMs = state.duration || current.durationMs || 0;\n          }\n        } else if (current.provider === 'youtube') {\n          // basic polling of iframe\n          const el = document.querySelector('iframe');\n          // fallback: not accurate; upgrade later to service-based hidden player\n        }\n      }), 1000);\n    }\n    toggleBarPlay() {\n      const cur = this.nowPlaying();\n      if (!cur) return;\n      if (this.barPlaying()) {\n        this.pause();\n      } else {\n        if (cur.provider === 'spotify') {\n          this.play();\n        } else if (cur.provider === 'youtube' && this.selectedYouTubeVideoId()) {\n          // nothing else needed, iframe already autoplayed\n        }\n      }\n    }\n    nextFromBar() {\n      this.next();\n    }\n    prevFromBar() {\n      this.previous();\n    }\n    onSeek(ev) {\n      const val = Number(ev.target.value || 0);\n      const cur = this.nowPlaying();\n      if (!cur) return;\n      if (cur.provider === 'spotify') {\n        this.spotifySdk.seek(val);\n      } else if (cur.provider === 'youtube') {\n        // future: use YouTubePlayerService hidden player\n      }\n      this.positionMs = val;\n    }\n    formatTime(ms) {\n      if (!ms) return '0:00';\n      const totalSec = Math.floor(ms / 1000);\n      const m = Math.floor(totalSec / 60);\n      const s = (totalSec % 60).toString().padStart(2, '0');\n      return `${m}:${s}`;\n    }\n    isSpotify(p) {\n      return p && p.provider === 'spotify';\n    }\n  }, _classThis = _Class, (() => {\n    const _metadata = typeof Symbol === \"function\" && Symbol.metadata ? Object.create(null) : void 0;\n    __esDecorate(null, _classDescriptor = {\n      value: _classThis\n    }, _classDecorators, {\n      kind: \"class\",\n      name: _classThis.name,\n      metadata: _metadata\n    }, null, _classExtraInitializers);\n    _AppComponent = _classThis = _classDescriptor.value;\n    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: _metadata\n    });\n    __runInitializers(_classThis, _classExtraInitializers);\n  })(), _Class);\n  return _AppComponent = _classThis;\n})();\nexport { AppComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}